/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * OpenAPI spec version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AssetAdministrationShellRepositoryAPIApi", () => {
  let instance: api.AssetAdministrationShellRepositoryAPIApi
  beforeEach(function() {
    instance = new api.AssetAdministrationShellRepositoryAPIApi(config)
  });

  test("deleteAssetAdministrationShellById", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.deleteAssetAdministrationShellById(aasIdentifier, {})).resolves.toBe(null)
  })
  test("deleteFileByPathAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.deleteFileByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("deleteSubmodelByIdAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    return expect(instance.deleteSubmodelByIdAasRepository(aasIdentifier, submodelIdentifier, {})).resolves.toBe(null)
  })
  test("deleteSubmodelElementByPathAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.deleteSubmodelElementByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("deleteSubmodelReferenceByIdAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    return expect(instance.deleteSubmodelReferenceByIdAasRepository(aasIdentifier, submodelIdentifier, {})).resolves.toBe(null)
  })
  test("deleteThumbnailAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.deleteThumbnailAasRepository(aasIdentifier, {})).resolves.toBe(null)
  })
  test("getAllAssetAdministrationShells", () => {
    const assetIds: Array<string> = undefined
    const idShort: string = "idShort_example"
    const limit: number = 56
    const cursor: string = "cursor_example"
    return expect(instance.getAllAssetAdministrationShells(assetIds, idShort, limit, cursor, {})).resolves.toBe(null)
  })
  test("getAllAssetAdministrationShellsReference", () => {
    const assetIds: Array<string> = undefined
    const idShort: string = "idShort_example"
    const limit: number = 56
    const cursor: string = "cursor_example"
    return expect(instance.getAllAssetAdministrationShellsReference(assetIds, idShort, limit, cursor, {})).resolves.toBe(null)
  })
  test("getAllSubmodelElementsAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const limit: number = 56
    const cursor: string = "cursor_example"
    const level: string = "level_example"
    const extent: string = "extent_example"
    return expect(instance.getAllSubmodelElementsAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, extent, {})).resolves.toBe(null)
  })
  test("getAllSubmodelElementsMetadataAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const limit: number = 56
    const cursor: string = "cursor_example"
    return expect(instance.getAllSubmodelElementsMetadataAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, {})).resolves.toBe(null)
  })
  test("getAllSubmodelElementsPathAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const limit: number = 56
    const cursor: string = "cursor_example"
    const level: string = "level_example"
    const extent: string = "extent_example"
    return expect(instance.getAllSubmodelElementsPathAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, extent, {})).resolves.toBe(null)
  })
  test("getAllSubmodelElementsReferenceAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const limit: number = 56
    const cursor: string = "cursor_example"
    const level: string = "level_example"
    return expect(instance.getAllSubmodelElementsReferenceAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, {})).resolves.toBe(null)
  })
  test("getAllSubmodelElementsValueOnlyAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const limit: number = 56
    const cursor: string = "cursor_example"
    const level: string = "level_example"
    return expect(instance.getAllSubmodelElementsValueOnlyAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, {})).resolves.toBe(null)
  })
  test("getAllSubmodelReferencesAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const limit: number = 56
    const cursor: string = "cursor_example"
    return expect(instance.getAllSubmodelReferencesAasRepository(aasIdentifier, limit, cursor, {})).resolves.toBe(null)
  })
  test("getAssetAdministrationShellById", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.getAssetAdministrationShellById(aasIdentifier, {})).resolves.toBe(null)
  })
  test("getAssetAdministrationShellByIdReferenceAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.getAssetAdministrationShellByIdReferenceAasRepository(aasIdentifier, {})).resolves.toBe(null)
  })
  test("getAssetInformationAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.getAssetInformationAasRepository(aasIdentifier, {})).resolves.toBe(null)
  })
  test("getFileByPathAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.getFileByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("getOperationAsyncResultAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    const handleId: string = "handleId_example"
    return expect(instance.getOperationAsyncResultAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, {})).resolves.toBe(null)
  })
  test("getOperationAsyncResultValueOnlyAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    const handleId: string = "handleId_example"
    return expect(instance.getOperationAsyncResultValueOnlyAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, {})).resolves.toBe(null)
  })
  test("getOperationAsyncStatusAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    const handleId: string = "handleId_example"
    return expect(instance.getOperationAsyncStatusAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, {})).resolves.toBe(null)
  })
  test("getSubmodelByIdAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const level: string = "level_example"
    const extent: string = "extent_example"
    return expect(instance.getSubmodelByIdAasRepository(aasIdentifier, submodelIdentifier, level, extent, {})).resolves.toBe(null)
  })
  test("getSubmodelByIdMetadataAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    return expect(instance.getSubmodelByIdMetadataAasRepository(aasIdentifier, submodelIdentifier, {})).resolves.toBe(null)
  })
  test("getSubmodelByIdPathAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const level: string = "level_example"
    return expect(instance.getSubmodelByIdPathAasRepository(aasIdentifier, submodelIdentifier, level, {})).resolves.toBe(null)
  })
  test("getSubmodelByIdReferenceAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    return expect(instance.getSubmodelByIdReferenceAasRepository(aasIdentifier, submodelIdentifier, {})).resolves.toBe(null)
  })
  test("getSubmodelByIdValueOnlyAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const level: string = "level_example"
    const extent: string = "extent_example"
    return expect(instance.getSubmodelByIdValueOnlyAasRepository(aasIdentifier, submodelIdentifier, level, extent, {})).resolves.toBe(null)
  })
  test("getSubmodelElementByPathAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    const level: string = "level_example"
    const extent: string = "extent_example"
    return expect(instance.getSubmodelElementByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, extent, {})).resolves.toBe(null)
  })
  test("getSubmodelElementByPathMetadataAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.getSubmodelElementByPathMetadataAasRepository(aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("getSubmodelElementByPathPathAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    const level: string = "level_example"
    return expect(instance.getSubmodelElementByPathPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, {})).resolves.toBe(null)
  })
  test("getSubmodelElementByPathReferenceAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    const level: string = "level_example"
    return expect(instance.getSubmodelElementByPathReferenceAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, {})).resolves.toBe(null)
  })
  test("getSubmodelElementByPathValueOnlyAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    const level: string = "level_example"
    const extent: string = "extent_example"
    return expect(instance.getSubmodelElementByPathValueOnlyAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, extent, {})).resolves.toBe(null)
  })
  test("getThumbnailAasRepository", () => {
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.getThumbnailAasRepository(aasIdentifier, {})).resolves.toBe(null)
  })
  test("invokeOperationAasRepository", () => {
    const body: api.OperationRequest = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.invokeOperationAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("invokeOperationAsyncAasRepository", () => {
    const body: api.OperationRequest = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.invokeOperationAsyncAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("invokeOperationAsyncValueOnlyAasRepository", () => {
    const body: api.OperationRequestValueOnly = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.invokeOperationAsyncValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("invokeOperationValueOnlyAasRepository", () => {
    const body: api.OperationRequestValueOnly = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.invokeOperationValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("patchSubmodelAasRepository", () => {
    const body: api.Submodel = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const level: string = "level_example"
    return expect(instance.patchSubmodelAasRepository(body, aasIdentifier, submodelIdentifier, level, {})).resolves.toBe(null)
  })
  test("patchSubmodelByIdMetadataAasRepository", () => {
    const body: api.SubmodelMetadata = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    return expect(instance.patchSubmodelByIdMetadataAasRepository(body, aasIdentifier, submodelIdentifier, {})).resolves.toBe(null)
  })
  test("patchSubmodelByIdValueOnlyAasRepository", () => {
    const body: api.SubmodelValue = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const level: string = "level_example"
    return expect(instance.patchSubmodelByIdValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, level, {})).resolves.toBe(null)
  })
  test("patchSubmodelElementValueByPathAasRepository", () => {
    const body: api.SubmodelElement = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    const level: string = "level_example"
    return expect(instance.patchSubmodelElementValueByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, level, {})).resolves.toBe(null)
  })
  test("patchSubmodelElementValueByPathMetadata", () => {
    const body: api.SubmodelElementMetadata = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.patchSubmodelElementValueByPathMetadata(body, aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("patchSubmodelElementValueByPathValueOnly", () => {
    const body: api.SubmodelElementValue = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    const level: string = "level_example"
    return expect(instance.patchSubmodelElementValueByPathValueOnly(body, aasIdentifier, submodelIdentifier, idShortPath, level, {})).resolves.toBe(null)
  })
  test("postAssetAdministrationShell", () => {
    const body: api.AssetAdministrationShell = undefined
    return expect(instance.postAssetAdministrationShell(body, {})).resolves.toBe(null)
  })
  test("postSubmodelElementAasRepository", () => {
    const body: api.SubmodelElement = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    return expect(instance.postSubmodelElementAasRepository(body, aasIdentifier, submodelIdentifier, {})).resolves.toBe(null)
  })
  test("postSubmodelElementByPathAasRepository", () => {
    const body: api.SubmodelElement = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.postSubmodelElementByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("postSubmodelReferenceAasRepository", () => {
    const body: api.Reference = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.postSubmodelReferenceAasRepository(body, aasIdentifier, {})).resolves.toBe(null)
  })
  test("putAssetAdministrationShellById", () => {
    const body: api.AssetAdministrationShell = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.putAssetAdministrationShellById(body, aasIdentifier, {})).resolves.toBe(null)
  })
  test("putAssetInformationAasRepository", () => {
    const body: api.AssetInformation = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.putAssetInformationAasRepository(body, aasIdentifier, {})).resolves.toBe(null)
  })
  test("putFileByPathAasRepository", () => {
    const fileName: string = "fileName_example"
    const file: Blob = "file_example"
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.putFileByPathAasRepository(fileName, file, aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("putSubmodelByIdAasRepository", () => {
    const body: api.Submodel = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    return expect(instance.putSubmodelByIdAasRepository(body, aasIdentifier, submodelIdentifier, {})).resolves.toBe(null)
  })
  test("putSubmodelElementByPathAasRepository", () => {
    const body: api.SubmodelElement = undefined
    const aasIdentifier: string = "aasIdentifier_example"
    const submodelIdentifier: string = "submodelIdentifier_example"
    const idShortPath: string = "idShortPath_example"
    return expect(instance.putSubmodelElementByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, {})).resolves.toBe(null)
  })
  test("putThumbnailAasRepository", () => {
    const fileName: string = "fileName_example"
    const file: Blob = "file_example"
    const aasIdentifier: string = "aasIdentifier_example"
    return expect(instance.putThumbnailAasRepository(fileName, file, aasIdentifier, {})).resolves.toBe(null)
  })
})

describe("DescriptionAPIApi", () => {
  let instance: api.DescriptionAPIApi
  beforeEach(function() {
    instance = new api.DescriptionAPIApi(config)
  });

  test("getDescription", () => {
    return expect(instance.getDescription({})).resolves.toBe(null)
  })
})

describe("SerializationAPIApi", () => {
  let instance: api.SerializationAPIApi
  beforeEach(function() {
    instance = new api.SerializationAPIApi(config)
  });

  test("generateSerializationByIds", () => {
    const aasIds: Array<string> = undefined
    const submodelIds: Array<string> = undefined
    const includeConceptDescriptions: boolean = true
    return expect(instance.generateSerializationByIds(aasIds, submodelIds, includeConceptDescriptions, {})).resolves.toBe(null)
  })
})

