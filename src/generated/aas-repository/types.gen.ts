// This file is auto-generated by @hey-api/openapi-ts

export type GetAssetAdministrationShellsResult = PagedResult & {
    result?: Array<AssetAdministrationShell>;
};

export type PagedResult = {
    paging_metadata?: PagedResultPagingMetadata;
};

export type AssetAdministrationShell = Identifiable & HasDataSpecification & {
    derivedFrom?: Reference;
    assetInformation: AssetInformation;
    submodels?: Array<Reference>;
    modelType?: string;
};

export type Identifiable = Referable & {
    administration?: AdministrativeInformation;
    id: string;
};

export type Referable = HasExtensions & {
    category?: string;
    idShort?: unknown;
    displayName?: Array<LangStringNameType>;
    description?: Array<LangStringTextType>;
    modelType: ModelType;
};

export type HasExtensions = {
    extensions?: Array<Extension>;
};

export type Extension = HasSemantics & {
    name: string;
    valueType?: DataTypeDefXsd;
    value?: string;
    refersTo?: Array<Reference>;
};

export type HasSemantics = {
    semanticId?: Reference;
    supplementalSemanticIds?: Array<Reference>;
};

export type Reference = ReferenceParent & {
    referredSemanticId?: ReferenceParent;
};

export type ReferenceParent = {
    type: ReferenceTypes;
    keys: Array<Key>;
};

export type ReferenceTypes = 'ExternalReference' | 'ModelReference';

export type Key = {
    type: KeyTypes;
    value: string;
};

export type KeyTypes = 'AnnotatedRelationshipElement' | 'AssetAdministrationShell' | 'BasicEventElement' | 'Blob' | 'Capability' | 'ConceptDescription' | 'DataElement' | 'Entity' | 'EventElement' | 'File' | 'FragmentReference' | 'GlobalReference' | 'Identifiable' | 'MultiLanguageProperty' | 'Operation' | 'Property' | 'Range' | 'Referable' | 'ReferenceElement' | 'RelationshipElement' | 'Submodel' | 'SubmodelElement' | 'SubmodelElementCollection' | 'SubmodelElementList';

export type DataTypeDefXsd = 'xs:anyURI' | 'xs:base64Binary' | 'xs:boolean' | 'xs:byte' | 'xs:date' | 'xs:dateTime' | 'xs:decimal' | 'xs:double' | 'xs:duration' | 'xs:float' | 'xs:gDay' | 'xs:gMonth' | 'xs:gMonthDay' | 'xs:gYear' | 'xs:gYearMonth' | 'xs:hexBinary' | 'xs:int' | 'xs:integer' | 'xs:long' | 'xs:negativeInteger' | 'xs:nonNegativeInteger' | 'xs:nonPositiveInteger' | 'xs:positiveInteger' | 'xs:short' | 'xs:string' | 'xs:time' | 'xs:unsignedByte' | 'xs:unsignedInt' | 'xs:unsignedLong' | 'xs:unsignedShort';

export type LangStringNameType = AbstractLangString & {
    text?: unknown;
};

export type AbstractLangString = {
    language: string;
    text: string;
};

export type LangStringTextType = AbstractLangString & {
    text?: unknown;
};

export type ModelType = 'AnnotatedRelationshipElement' | 'AssetAdministrationShell' | 'BasicEventElement' | 'Blob' | 'Capability' | 'ConceptDescription' | 'DataSpecificationIec61360' | 'Entity' | 'File' | 'MultiLanguageProperty' | 'Operation' | 'Property' | 'Range' | 'ReferenceElement' | 'RelationshipElement' | 'Submodel' | 'SubmodelElementCollection' | 'SubmodelElementList';

export type AdministrativeInformation = HasDataSpecification & {
    version?: unknown;
    revision?: unknown;
    creator?: Reference;
    templateId?: string;
};

export type HasDataSpecification = {
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
};

export type EmbeddedDataSpecification = {
    dataSpecificationContent: DataSpecificationContentChoice;
    dataSpecification: Reference;
};

export type DataSpecificationContentChoice = DataSpecificationIec61360;

export type DataSpecificationIec61360 = DataSpecificationContent & {
    preferredName: Array<LangStringPreferredNameTypeIec61360>;
    shortName?: Array<LangStringShortNameTypeIec61360>;
    unit?: string;
    unitId?: Reference;
    sourceOfDefinition?: string;
    symbol?: string;
    dataType?: DataTypeIec61360;
    definition?: Array<LangStringDefinitionTypeIec61360>;
    valueFormat?: string;
    valueList?: ValueList;
    value?: string;
    levelType?: LevelType;
    modelType?: string;
};

export type DataSpecificationContent = {
    modelType: ModelType;
};

export type LangStringPreferredNameTypeIec61360 = AbstractLangString & {
    text?: unknown;
};

export type LangStringShortNameTypeIec61360 = AbstractLangString & {
    text?: unknown;
};

export type DataTypeIec61360 = 'BLOB' | 'BOOLEAN' | 'DATE' | 'FILE' | 'HTML' | 'INTEGER_COUNT' | 'INTEGER_CURRENCY' | 'INTEGER_MEASURE' | 'IRDI' | 'IRI' | 'RATIONAL' | 'RATIONAL_MEASURE' | 'REAL_COUNT' | 'REAL_CURRENCY' | 'REAL_MEASURE' | 'STRING' | 'STRING_TRANSLATABLE' | 'TIME' | 'TIMESTAMP';

export type LangStringDefinitionTypeIec61360 = AbstractLangString & {
    text?: unknown;
};

export type ValueList = {
    valueReferencePairs: Array<ValueReferencePair>;
};

export type ValueReferencePair = {
    value: string;
    valueId: Reference;
};

export type LevelType = {
    min: boolean;
    nom: boolean;
    typ: boolean;
    max: boolean;
};

export type AssetInformation = {
    assetKind: AssetKind;
    globalAssetId?: string;
    specificAssetIds?: Array<SpecificAssetId>;
    assetType?: string;
    defaultThumbnail?: Resource;
};

export type AssetKind = 'Instance' | 'NotApplicable' | 'Type';

export type SpecificAssetId = HasSemantics & {
    name: string;
    value: string;
    externalSubjectId?: Reference;
};

export type Resource = {
    path: string;
    contentType?: unknown;
};

export type Result = {
    messages?: Array<Message>;
};

export type Message = {
    code?: string;
    correlationId?: string;
    messageType?: 'Undefined' | 'Info' | 'Warning' | 'Error' | 'Exception';
    text?: string;
    timestamp?: string;
};

export type GetReferencesResult = PagedResult & {
    result?: Array<Reference>;
};

export type Submodel = Identifiable & HasKind & HasSemantics & Qualifiable & HasDataSpecification & {
    submodelElements?: Array<SubmodelElementChoice>;
    modelType?: string;
};

export type HasKind = {
    kind?: ModellingKind;
};

export type ModellingKind = 'Instance' | 'Template';

export type Qualifiable = {
    qualifiers?: Array<Qualifier>;
    modelType: ModelType;
};

export type Qualifier = HasSemantics & {
    kind?: QualifierKind;
    type: string;
    valueType: DataTypeDefXsd;
    value?: string;
    valueId?: Reference;
};

export type QualifierKind = 'ConceptQualifier' | 'TemplateQualifier' | 'ValueQualifier';

export type SubmodelElementChoice = RelationshipElement | AnnotatedRelationshipElement | BasicEventElement | Blob | Capability | Entity | File | MultiLanguageProperty | Operation | Property | Range | ReferenceElement | SubmodelElementCollection | SubmodelElementList;

export type RelationshipElement = RelationshipElementAbstract & {
    modelType?: string;
};

export type RelationshipElementAbstract = SubmodelElement & {
    first: Reference;
    second: Reference;
};

export type SubmodelElement = Referable & HasSemantics & Qualifiable & HasDataSpecification;

export type AnnotatedRelationshipElement = RelationshipElementAbstract & {
    annotations?: Array<DataElementChoice>;
    modelType?: string;
};

export type DataElementChoice = Blob | File | MultiLanguageProperty | Property | Range | ReferenceElement;

export type Blob = DataElement & {
    value?: string;
    contentType: unknown;
    modelType?: string;
};

export type DataElement = Referable & HasSemantics & Qualifiable & HasDataSpecification;

export type File = DataElement & {
    value?: string;
    contentType: unknown;
    modelType?: string;
};

export type MultiLanguageProperty = DataElement & {
    value?: Array<LangStringTextType>;
    valueId?: Reference;
    modelType?: string;
};

export type Property = DataElement & {
    valueType: DataTypeDefXsd;
    value?: string;
    valueId?: Reference;
    modelType?: string;
};

export type Range = DataElement & {
    valueType: DataTypeDefXsd;
    min?: string;
    max?: string;
    modelType?: string;
};

export type ReferenceElement = DataElement & {
    value?: Reference;
    modelType?: string;
};

export type BasicEventElement = EventElement & {
    observed: Reference;
    direction: Direction;
    state: StateOfEvent;
    messageTopic?: string;
    messageBroker?: Reference;
    lastUpdate?: string;
    minInterval?: string;
    maxInterval?: string;
    modelType?: string;
};

export type EventElement = Referable & HasSemantics & Qualifiable & HasDataSpecification;

export type Direction = 'input' | 'output';

export type StateOfEvent = 'off' | 'on';

export type Capability = SubmodelElement & {
    modelType?: string;
};

export type Entity = SubmodelElement & {
    statements?: Array<SubmodelElementChoice>;
    entityType: EntityType;
    globalAssetId?: string;
    specificAssetIds?: Array<SpecificAssetId>;
    modelType?: string;
};

export type EntityType = 'CoManagedEntity' | 'SelfManagedEntity';

export type Operation = SubmodelElement & {
    inputVariables?: Array<OperationVariable>;
    outputVariables?: Array<OperationVariable>;
    inoutputVariables?: Array<OperationVariable>;
    modelType?: string;
};

export type OperationVariable = {
    value: SubmodelElementChoice;
};

export type SubmodelElementCollection = SubmodelElement & {
    value?: Array<SubmodelElementChoice>;
    modelType?: string;
};

export type SubmodelElementList = SubmodelElement & {
    orderRelevant?: boolean;
    semanticIdListElement?: Reference;
    typeValueListElement: AasSubmodelElements;
    valueTypeListElement?: DataTypeDefXsd;
    value?: Array<SubmodelElementChoice>;
    modelType?: string;
};

export type AasSubmodelElements = 'AnnotatedRelationshipElement' | 'BasicEventElement' | 'Blob' | 'Capability' | 'DataElement' | 'Entity' | 'EventElement' | 'File' | 'MultiLanguageProperty' | 'Operation' | 'Property' | 'Range' | 'ReferenceElement' | 'RelationshipElement' | 'SubmodelElement' | 'SubmodelElementCollection' | 'SubmodelElementList';

export type SubmodelMetadata = Identifiable & HasDataSpecification & Qualifiable & HasSemantics & HasKind;

/**
 * The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.
 */
export type SubmodelValue = {
    [key: string]: unknown;
};

export type PathItem = string;

export type GetSubmodelElementsResult = PagedResult & {
    result?: Array<SubmodelElement>;
};

export type GetSubmodelElementsMetadataResult = PagedResult & {
    result?: Array<SubmodelElementMetadata>;
};

export type SubmodelElementMetadata = BlobMetadata | FileMetadata | CapabilityMetadata | EntityMetadata | BasicEventElementMetadata | MultiLanguagePropertyMetadata | OperationMetadata | PropertyMetadata | RangeMetadata | ReferenceElementMetadata | AnnotatedRelationshipElementMetadata | RelationshipElementMetadata | SubmodelElementListMetadata | SubmodelElementCollectionMetadata;

export type BlobMetadata = Referable1 & HasDataSpecification & HasSemantics1 & Qualifiable1 & HasKind1;

export type FileMetadata = SubmodelElementAttributes;

export type SubmodelElementAttributes = Referable1 & HasDataSpecification & HasSemantics1 & Qualifiable1 & HasKind1;

export type Referable1 = HasExtensions & {
    category?: string;
    idShort?: unknown;
    displayName?: Array<LangStringNameType>;
    description?: Array<LangStringTextType>;
    modelType: ModelType;
};

export type HasSemantics1 = {
    semanticId?: Reference;
    supplementalSemanticIds?: Array<Reference>;
};

export type Qualifiable1 = {
    qualifiers?: Array<Qualifier1>;
    modelType: ModelType;
};

export type Qualifier1 = HasSemantics1 & {
    kind?: QualifierKind;
    type: string;
    valueType: DataTypeDefXsd;
    value?: string;
    valueId?: Reference;
};

export type HasKind1 = {
    kind?: ModellingKind;
};

export type CapabilityMetadata = SubmodelElementAttributes;

export type EntityMetadata = SubmodelElementAttributes;

export type BasicEventElementMetadata = SubmodelElementAttributes & {
    direction?: Direction;
    state?: StateOfEvent;
    messageTopic?: string;
    messageBroker?: Reference;
    lastUpdate?: string;
    minInterval?: string;
    maxInterval?: string;
};

export type MultiLanguagePropertyMetadata = SubmodelElementAttributes;

export type OperationMetadata = SubmodelElementAttributes;

export type PropertyMetadata = SubmodelElementAttributes & {
    valueType?: DataTypeDefXsd;
};

export type RangeMetadata = SubmodelElementAttributes & {
    valueType?: DataTypeDefXsd;
};

export type ReferenceElementMetadata = SubmodelElementAttributes;

export type AnnotatedRelationshipElementMetadata = Referable1 & HasDataSpecification & HasSemantics1 & Qualifiable1 & HasKind1;

export type RelationshipElementMetadata = SubmodelElementAttributes;

export type SubmodelElementListMetadata = SubmodelElementAttributes & {
    orderRelevant?: boolean;
    semanticIdListElement?: Reference;
    typeValueListElement?: ModelType;
    valueTypeListElement?: DataTypeDefXsd;
};

export type SubmodelElementCollectionMetadata = SubmodelElementAttributes;

export type GetSubmodelElementsValueResult = PagedResult & {
    result?: Array<SubmodelElementValue>;
};

export type SubmodelElementValue = BasicEventElementValue | PropertyValue | MultiLanguagePropertyValue | BlobValue | FileValue | RangeValue | ReferenceElementValue | RelationshipElementValue | AnnotatedRelationshipElementValue | EntityValue | SubmodelElementCollectionValue | SubmodelElementListValue;

export type BasicEventElementValue = {
    observed: ReferenceValue;
};

export type ReferenceValue = {
    type?: ReferenceTypes;
    keys?: Array<Key>;
};

export type PropertyValue = StringValue | NumberValue | BooleanValue;

export type StringValue = string;

export type NumberValue = number;

export type BooleanValue = boolean;

/**
 * Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.
 */
export type MultiLanguagePropertyValue = {
    [key: string]: unknown;
};

export type BlobValue = {
    contentType: string;
    value?: string;
};

export type FileValue = {
    contentType: string;
    value: string;
};

export type RangeValue = {
    max?: RangeValueType;
    min?: RangeValueType;
};

export type RangeValueType = StringValue | NumberValue | BooleanValue;

export type ReferenceElementValue = {
    type?: ReferenceTypes;
    keys?: Array<Key>;
};

export type RelationshipElementValue = {
    first: ReferenceValue;
    second: ReferenceValue;
};

export type AnnotatedRelationshipElementValue = {
    first: ReferenceValue;
    second: ReferenceValue;
    annotations?: Array<ValueOnly>;
};

/**
 * The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.
 */
export type ValueOnly = {
    [key: string]: unknown;
};

export type EntityValue = {
    entityType: EntityType;
    globalAssetId?: string;
    specificAssetIds?: Array<SpecificAssetIdValue>;
    statements?: Array<ValueOnly>;
};

/**
 * Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.
 */
export type SpecificAssetIdValue = {
    [key: string]: unknown;
};

/**
 * Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.
 */
export type SubmodelElementCollectionValue = {
    [key: string]: unknown;
};

export type SubmodelElementListValue = Array<SubmodelElementValue>;

export type GetPathItemsResult = PagedResult & {
    result?: Array<PathItem>;
};

export type OperationRequest = {
    inoutputArguments?: Array<OperationVariable>;
    inputArguments?: Array<OperationVariable>;
    clientTimeoutDuration?: string;
};

export type OperationResult = BaseOperationResult & {
    inoutputArguments?: Array<OperationVariable>;
    outputArguments?: Array<OperationVariable>;
};

export type BaseOperationResult = Result & {
    executionState?: ExecutionState;
    success?: boolean;
};

export type ExecutionState = 'Initiated' | 'Running' | 'Completed' | 'Canceled' | 'Failed' | 'Timeout';

export type OperationRequestValueOnly = {
    inoutputArguments?: ValueOnly;
    inputArguments?: ValueOnly;
    clientTimeoutDuration: string;
};

export type OperationResultValueOnly = BaseOperationResult & {
    inoutputArguments?: ValueOnly;
    outputArguments?: ValueOnly;
};

export type Environment = {
    assetAdministrationShells?: Array<AssetAdministrationShell>;
    submodels?: Array<Submodel>;
    conceptDescriptions?: Array<ConceptDescription>;
};

export type ConceptDescription = Identifiable & HasDataSpecification & {
    isCaseOf?: Array<Reference>;
    modelType?: string;
};

/**
 * The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
 */
export type ServiceDescription = {
    profiles?: Array<string>;
};

export type AssetinformationThumbnailBody = {
    fileName?: string;
    file?: Blob | File;
};

export type IdShortPathAttachmentBody = {
    fileName?: string;
    file?: Blob | File;
};

export type PagedResultPagingMetadata = {
    cursor?: string;
};

/**
 * A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
 */
export type AssetIds = Array<string>;

/**
 * The Asset Administration Shell’s IdShort
 */
export type IdShort = string;

/**
 * The maximum number of elements in the response array
 */
export type Limit = number;

/**
 * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
 */
export type Cursor = string;

/**
 * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
 */
export type AssetAdministrationShellIdentifier = string;

/**
 * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
 */
export type SubmodelIdentifier = string;

/**
 * Determines the structural depth of the respective resource content
 */
export type Level = 'deep' | 'core';

/**
 * Determines to which extent the resource is being serialized
 */
export type Extent = 'withBlobValue' | 'withoutBlobValue';

/**
 * IdShort path to the submodel element (dot-separated)
 */
export type IdShortPath = string;

/**
 * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
 */
export type HandleId = string;

export type GetAllAssetAdministrationShellsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         */
        assetIds?: Array<string>;
        /**
         * The Asset Administration Shell’s IdShort
         */
        idShort?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/shells';
};

export type GetAllAssetAdministrationShellsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllAssetAdministrationShellsError = GetAllAssetAdministrationShellsErrors[keyof GetAllAssetAdministrationShellsErrors];

export type GetAllAssetAdministrationShellsResponses = {
    /**
     * Requested Asset Administration Shells
     */
    200: GetAssetAdministrationShellsResult;
};

export type GetAllAssetAdministrationShellsResponse = GetAllAssetAdministrationShellsResponses[keyof GetAllAssetAdministrationShellsResponses];

export type PostAssetAdministrationShellData = {
    /**
     * Asset Administration Shell object
     */
    body: AssetAdministrationShell;
    path?: never;
    query?: never;
    url: '/shells';
};

export type PostAssetAdministrationShellErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostAssetAdministrationShellError = PostAssetAdministrationShellErrors[keyof PostAssetAdministrationShellErrors];

export type PostAssetAdministrationShellResponses = {
    /**
     * Asset Administration Shell created successfully
     */
    201: AssetAdministrationShell;
};

export type PostAssetAdministrationShellResponse = PostAssetAdministrationShellResponses[keyof PostAssetAdministrationShellResponses];

export type GetAllAssetAdministrationShellsReferenceData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         */
        assetIds?: Array<string>;
        /**
         * The Asset Administration Shell’s IdShort
         */
        idShort?: string;
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/shells/$reference';
};

export type GetAllAssetAdministrationShellsReferenceErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllAssetAdministrationShellsReferenceError = GetAllAssetAdministrationShellsReferenceErrors[keyof GetAllAssetAdministrationShellsReferenceErrors];

export type GetAllAssetAdministrationShellsReferenceResponses = {
    /**
     * Requested Asset Administration Shells as a list of References
     */
    200: GetReferencesResult;
};

export type GetAllAssetAdministrationShellsReferenceResponse = GetAllAssetAdministrationShellsReferenceResponses[keyof GetAllAssetAdministrationShellsReferenceResponses];

export type DeleteAssetAdministrationShellByIdData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}';
};

export type DeleteAssetAdministrationShellByIdErrors = {
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteAssetAdministrationShellByIdError = DeleteAssetAdministrationShellByIdErrors[keyof DeleteAssetAdministrationShellByIdErrors];

export type DeleteAssetAdministrationShellByIdResponses = {
    /**
     * Asset Administration Shell deleted successfully
     */
    204: void;
};

export type DeleteAssetAdministrationShellByIdResponse = DeleteAssetAdministrationShellByIdResponses[keyof DeleteAssetAdministrationShellByIdResponses];

export type GetAssetAdministrationShellByIdData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}';
};

export type GetAssetAdministrationShellByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetAdministrationShellByIdError = GetAssetAdministrationShellByIdErrors[keyof GetAssetAdministrationShellByIdErrors];

export type GetAssetAdministrationShellByIdResponses = {
    /**
     * Requested Asset Administration Shell
     */
    200: AssetAdministrationShell;
};

export type GetAssetAdministrationShellByIdResponse = GetAssetAdministrationShellByIdResponses[keyof GetAssetAdministrationShellByIdResponses];

export type PutAssetAdministrationShellByIdData = {
    /**
     * Asset Administration Shell object
     */
    body: AssetAdministrationShell;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}';
};

export type PutAssetAdministrationShellByIdErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutAssetAdministrationShellByIdError = PutAssetAdministrationShellByIdErrors[keyof PutAssetAdministrationShellByIdErrors];

export type PutAssetAdministrationShellByIdResponses = {
    /**
     * Asset Administration Shell updated successfully
     */
    204: void;
};

export type PutAssetAdministrationShellByIdResponse = PutAssetAdministrationShellByIdResponses[keyof PutAssetAdministrationShellByIdResponses];

export type GetAssetAdministrationShellByIdReferenceAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/$reference';
};

export type GetAssetAdministrationShellByIdReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetAdministrationShellByIdReferenceAasRepositoryError = GetAssetAdministrationShellByIdReferenceAasRepositoryErrors[keyof GetAssetAdministrationShellByIdReferenceAasRepositoryErrors];

export type GetAssetAdministrationShellByIdReferenceAasRepositoryResponses = {
    /**
     * Requested Asset Administration Shell
     */
    200: Reference;
};

export type GetAssetAdministrationShellByIdReferenceAasRepositoryResponse = GetAssetAdministrationShellByIdReferenceAasRepositoryResponses[keyof GetAssetAdministrationShellByIdReferenceAasRepositoryResponses];

export type GetAssetInformationAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information';
};

export type GetAssetInformationAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAssetInformationAasRepositoryError = GetAssetInformationAasRepositoryErrors[keyof GetAssetInformationAasRepositoryErrors];

export type GetAssetInformationAasRepositoryResponses = {
    /**
     * Requested Asset Information
     */
    200: AssetInformation;
};

export type GetAssetInformationAasRepositoryResponse = GetAssetInformationAasRepositoryResponses[keyof GetAssetInformationAasRepositoryResponses];

export type PutAssetInformationAasRepositoryData = {
    /**
     * Asset Information object
     */
    body: AssetInformation;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information';
};

export type PutAssetInformationAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutAssetInformationAasRepositoryError = PutAssetInformationAasRepositoryErrors[keyof PutAssetInformationAasRepositoryErrors];

export type PutAssetInformationAasRepositoryResponses = {
    /**
     * Asset Information updated successfully
     */
    204: void;
};

export type PutAssetInformationAasRepositoryResponse = PutAssetInformationAasRepositoryResponses[keyof PutAssetInformationAasRepositoryResponses];

export type DeleteThumbnailAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information/thumbnail';
};

export type DeleteThumbnailAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteThumbnailAasRepositoryError = DeleteThumbnailAasRepositoryErrors[keyof DeleteThumbnailAasRepositoryErrors];

export type DeleteThumbnailAasRepositoryResponses = {
    /**
     * Thumbnail deletion successful
     */
    200: unknown;
};

export type GetThumbnailAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information/thumbnail';
};

export type GetThumbnailAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetThumbnailAasRepositoryError = GetThumbnailAasRepositoryErrors[keyof GetThumbnailAasRepositoryErrors];

export type GetThumbnailAasRepositoryResponses = {
    /**
     * The thumbnail of the Asset Information.
     */
    200: Blob | File;
};

export type GetThumbnailAasRepositoryResponse = GetThumbnailAasRepositoryResponses[keyof GetThumbnailAasRepositoryResponses];

export type PutThumbnailAasRepositoryData = {
    /**
     * Thumbnail to upload
     */
    body: AssetinformationThumbnailBody;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/asset-information/thumbnail';
};

export type PutThumbnailAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutThumbnailAasRepositoryError = PutThumbnailAasRepositoryErrors[keyof PutThumbnailAasRepositoryErrors];

export type PutThumbnailAasRepositoryResponses = {
    /**
     * Thumbnail updated successfully
     */
    204: void;
};

export type PutThumbnailAasRepositoryResponse = PutThumbnailAasRepositoryResponses[keyof PutThumbnailAasRepositoryResponses];

export type GetAllSubmodelReferencesAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/shells/{aasIdentifier}/submodel-refs';
};

export type GetAllSubmodelReferencesAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelReferencesAasRepositoryError = GetAllSubmodelReferencesAasRepositoryErrors[keyof GetAllSubmodelReferencesAasRepositoryErrors];

export type GetAllSubmodelReferencesAasRepositoryResponses = {
    /**
     * Requested submodel references
     */
    200: GetReferencesResult;
};

export type GetAllSubmodelReferencesAasRepositoryResponse = GetAllSubmodelReferencesAasRepositoryResponses[keyof GetAllSubmodelReferencesAasRepositoryResponses];

export type PostSubmodelReferenceAasRepositoryData = {
    /**
     * Reference to the Submodel
     */
    body: Reference;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodel-refs';
};

export type PostSubmodelReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelReferenceAasRepositoryError = PostSubmodelReferenceAasRepositoryErrors[keyof PostSubmodelReferenceAasRepositoryErrors];

export type PostSubmodelReferenceAasRepositoryResponses = {
    /**
     * Submodel reference created successfully
     */
    201: Reference;
};

export type PostSubmodelReferenceAasRepositoryResponse = PostSubmodelReferenceAasRepositoryResponses[keyof PostSubmodelReferenceAasRepositoryResponses];

export type DeleteSubmodelReferenceByIdAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}';
};

export type DeleteSubmodelReferenceByIdAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelReferenceByIdAasRepositoryError = DeleteSubmodelReferenceByIdAasRepositoryErrors[keyof DeleteSubmodelReferenceByIdAasRepositoryErrors];

export type DeleteSubmodelReferenceByIdAasRepositoryResponses = {
    /**
     * Submodel reference deleted successfully
     */
    204: void;
};

export type DeleteSubmodelReferenceByIdAasRepositoryResponse = DeleteSubmodelReferenceByIdAasRepositoryResponses[keyof DeleteSubmodelReferenceByIdAasRepositoryResponses];

export type DeleteSubmodelByIdAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}';
};

export type DeleteSubmodelByIdAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelByIdAasRepositoryError = DeleteSubmodelByIdAasRepositoryErrors[keyof DeleteSubmodelByIdAasRepositoryErrors];

export type DeleteSubmodelByIdAasRepositoryResponses = {
    /**
     * Submodel deleted successfully
     */
    204: void;
};

export type DeleteSubmodelByIdAasRepositoryResponse = DeleteSubmodelByIdAasRepositoryResponses[keyof DeleteSubmodelByIdAasRepositoryResponses];

export type GetSubmodelByIdAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}';
};

export type GetSubmodelByIdAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdAasRepositoryError = GetSubmodelByIdAasRepositoryErrors[keyof GetSubmodelByIdAasRepositoryErrors];

export type GetSubmodelByIdAasRepositoryResponses = {
    /**
     * Requested Submodel
     */
    200: Submodel;
};

export type GetSubmodelByIdAasRepositoryResponse = GetSubmodelByIdAasRepositoryResponses[keyof GetSubmodelByIdAasRepositoryResponses];

export type PatchSubmodelAasRepositoryData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}';
};

export type PatchSubmodelAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelAasRepositoryError = PatchSubmodelAasRepositoryErrors[keyof PatchSubmodelAasRepositoryErrors];

export type PatchSubmodelAasRepositoryResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelAasRepositoryResponse = PatchSubmodelAasRepositoryResponses[keyof PatchSubmodelAasRepositoryResponses];

export type PutSubmodelByIdAasRepositoryData = {
    /**
     * Submodel object
     */
    body: Submodel;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}';
};

export type PutSubmodelByIdAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelByIdAasRepositoryError = PutSubmodelByIdAasRepositoryErrors[keyof PutSubmodelByIdAasRepositoryErrors];

export type PutSubmodelByIdAasRepositoryResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PutSubmodelByIdAasRepositoryResponse = PutSubmodelByIdAasRepositoryResponses[keyof PutSubmodelByIdAasRepositoryResponses];

export type GetSubmodelByIdMetadataAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata';
};

export type GetSubmodelByIdMetadataAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdMetadataAasRepositoryError = GetSubmodelByIdMetadataAasRepositoryErrors[keyof GetSubmodelByIdMetadataAasRepositoryErrors];

export type GetSubmodelByIdMetadataAasRepositoryResponses = {
    /**
     * Requested Submodel
     */
    200: SubmodelMetadata;
};

export type GetSubmodelByIdMetadataAasRepositoryResponse = GetSubmodelByIdMetadataAasRepositoryResponses[keyof GetSubmodelByIdMetadataAasRepositoryResponses];

export type PatchSubmodelByIdMetadataAasRepositoryData = {
    /**
     * Submodel object
     */
    body: SubmodelMetadata;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata';
};

export type PatchSubmodelByIdMetadataAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelByIdMetadataAasRepositoryError = PatchSubmodelByIdMetadataAasRepositoryErrors[keyof PatchSubmodelByIdMetadataAasRepositoryErrors];

export type PatchSubmodelByIdMetadataAasRepositoryResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelByIdMetadataAasRepositoryResponse = PatchSubmodelByIdMetadataAasRepositoryResponses[keyof PatchSubmodelByIdMetadataAasRepositoryResponses];

export type GetSubmodelByIdValueOnlyAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value';
};

export type GetSubmodelByIdValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdValueOnlyAasRepositoryError = GetSubmodelByIdValueOnlyAasRepositoryErrors[keyof GetSubmodelByIdValueOnlyAasRepositoryErrors];

export type GetSubmodelByIdValueOnlyAasRepositoryResponses = {
    /**
     * Requested Submodel
     */
    200: SubmodelValue;
};

export type GetSubmodelByIdValueOnlyAasRepositoryResponse = GetSubmodelByIdValueOnlyAasRepositoryResponses[keyof GetSubmodelByIdValueOnlyAasRepositoryResponses];

export type PatchSubmodelByIdValueOnlyAasRepositoryData = {
    /**
     * Submodel object in the ValueOnly representation
     */
    body: SubmodelValue;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value';
};

export type PatchSubmodelByIdValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelByIdValueOnlyAasRepositoryError = PatchSubmodelByIdValueOnlyAasRepositoryErrors[keyof PatchSubmodelByIdValueOnlyAasRepositoryErrors];

export type PatchSubmodelByIdValueOnlyAasRepositoryResponses = {
    /**
     * Submodel updated successfully
     */
    204: void;
};

export type PatchSubmodelByIdValueOnlyAasRepositoryResponse = PatchSubmodelByIdValueOnlyAasRepositoryResponses[keyof PatchSubmodelByIdValueOnlyAasRepositoryResponses];

export type GetSubmodelByIdReferenceAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference';
};

export type GetSubmodelByIdReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdReferenceAasRepositoryError = GetSubmodelByIdReferenceAasRepositoryErrors[keyof GetSubmodelByIdReferenceAasRepositoryErrors];

export type GetSubmodelByIdReferenceAasRepositoryResponses = {
    /**
     * Requested Submodel as a Reference
     */
    200: Reference;
};

export type GetSubmodelByIdReferenceAasRepositoryResponse = GetSubmodelByIdReferenceAasRepositoryResponses[keyof GetSubmodelByIdReferenceAasRepositoryResponses];

export type GetSubmodelByIdPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$path';
};

export type GetSubmodelByIdPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelByIdPathAasRepositoryError = GetSubmodelByIdPathAasRepositoryErrors[keyof GetSubmodelByIdPathAasRepositoryErrors];

export type GetSubmodelByIdPathAasRepositoryResponses = {
    /**
     * Requested Submodel in Path notation
     */
    200: Array<PathItem>;
};

export type GetSubmodelByIdPathAasRepositoryResponse = GetSubmodelByIdPathAasRepositoryResponses[keyof GetSubmodelByIdPathAasRepositoryResponses];

export type GetAllSubmodelElementsAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements';
};

export type GetAllSubmodelElementsAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsAasRepositoryError = GetAllSubmodelElementsAasRepositoryErrors[keyof GetAllSubmodelElementsAasRepositoryErrors];

export type GetAllSubmodelElementsAasRepositoryResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsResult;
};

export type GetAllSubmodelElementsAasRepositoryResponse = GetAllSubmodelElementsAasRepositoryResponses[keyof GetAllSubmodelElementsAasRepositoryResponses];

export type PostSubmodelElementAasRepositoryData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements';
};

export type PostSubmodelElementAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementAasRepositoryError = PostSubmodelElementAasRepositoryErrors[keyof PostSubmodelElementAasRepositoryErrors];

export type PostSubmodelElementAasRepositoryResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementAasRepositoryResponse = PostSubmodelElementAasRepositoryResponses[keyof PostSubmodelElementAasRepositoryResponses];

export type GetAllSubmodelElementsMetadataAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$metadata';
};

export type GetAllSubmodelElementsMetadataAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsMetadataAasRepositoryError = GetAllSubmodelElementsMetadataAasRepositoryErrors[keyof GetAllSubmodelElementsMetadataAasRepositoryErrors];

export type GetAllSubmodelElementsMetadataAasRepositoryResponses = {
    /**
     * List of found submodel elements
     */
    200: GetSubmodelElementsMetadataResult;
};

export type GetAllSubmodelElementsMetadataAasRepositoryResponse = GetAllSubmodelElementsMetadataAasRepositoryResponses[keyof GetAllSubmodelElementsMetadataAasRepositoryResponses];

export type GetAllSubmodelElementsValueOnlyAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$value';
};

export type GetAllSubmodelElementsValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsValueOnlyAasRepositoryError = GetAllSubmodelElementsValueOnlyAasRepositoryErrors[keyof GetAllSubmodelElementsValueOnlyAasRepositoryErrors];

export type GetAllSubmodelElementsValueOnlyAasRepositoryResponses = {
    /**
     * List of found submodel elements in their ValueOnly representation
     */
    200: GetSubmodelElementsValueResult;
};

export type GetAllSubmodelElementsValueOnlyAasRepositoryResponse = GetAllSubmodelElementsValueOnlyAasRepositoryResponses[keyof GetAllSubmodelElementsValueOnlyAasRepositoryResponses];

export type GetAllSubmodelElementsReferenceAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$reference';
};

export type GetAllSubmodelElementsReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsReferenceAasRepositoryError = GetAllSubmodelElementsReferenceAasRepositoryErrors[keyof GetAllSubmodelElementsReferenceAasRepositoryErrors];

export type GetAllSubmodelElementsReferenceAasRepositoryResponses = {
    /**
     * List of References of the found submodel elements
     */
    200: GetReferencesResult;
};

export type GetAllSubmodelElementsReferenceAasRepositoryResponse = GetAllSubmodelElementsReferenceAasRepositoryResponses[keyof GetAllSubmodelElementsReferenceAasRepositoryResponses];

export type GetAllSubmodelElementsPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
    };
    query?: {
        /**
         * The maximum number of elements in the response array
         */
        limit?: number;
        /**
         * A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         */
        cursor?: string;
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$path';
};

export type GetAllSubmodelElementsPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetAllSubmodelElementsPathAasRepositoryError = GetAllSubmodelElementsPathAasRepositoryErrors[keyof GetAllSubmodelElementsPathAasRepositoryErrors];

export type GetAllSubmodelElementsPathAasRepositoryResponses = {
    /**
     * List of found submodel elements in the Path notation
     */
    200: GetPathItemsResult;
};

export type GetAllSubmodelElementsPathAasRepositoryResponse = GetAllSubmodelElementsPathAasRepositoryResponses[keyof GetAllSubmodelElementsPathAasRepositoryResponses];

export type DeleteSubmodelElementByPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type DeleteSubmodelElementByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteSubmodelElementByPathAasRepositoryError = DeleteSubmodelElementByPathAasRepositoryErrors[keyof DeleteSubmodelElementByPathAasRepositoryErrors];

export type DeleteSubmodelElementByPathAasRepositoryResponses = {
    /**
     * Submodel element deleted successfully
     */
    204: void;
};

export type DeleteSubmodelElementByPathAasRepositoryResponse = DeleteSubmodelElementByPathAasRepositoryResponses[keyof DeleteSubmodelElementByPathAasRepositoryResponses];

export type GetSubmodelElementByPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type GetSubmodelElementByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathAasRepositoryError = GetSubmodelElementByPathAasRepositoryErrors[keyof GetSubmodelElementByPathAasRepositoryErrors];

export type GetSubmodelElementByPathAasRepositoryResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElement;
};

export type GetSubmodelElementByPathAasRepositoryResponse = GetSubmodelElementByPathAasRepositoryResponses[keyof GetSubmodelElementByPathAasRepositoryResponses];

export type PatchSubmodelElementValueByPathAasRepositoryData = {
    /**
     * The updated value of the submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PatchSubmodelElementValueByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementValueByPathAasRepositoryError = PatchSubmodelElementValueByPathAasRepositoryErrors[keyof PatchSubmodelElementValueByPathAasRepositoryErrors];

export type PatchSubmodelElementValueByPathAasRepositoryResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PatchSubmodelElementValueByPathAasRepositoryResponse = PatchSubmodelElementValueByPathAasRepositoryResponses[keyof PatchSubmodelElementValueByPathAasRepositoryResponses];

export type PostSubmodelElementByPathAasRepositoryData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PostSubmodelElementByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.
     */
    409: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PostSubmodelElementByPathAasRepositoryError = PostSubmodelElementByPathAasRepositoryErrors[keyof PostSubmodelElementByPathAasRepositoryErrors];

export type PostSubmodelElementByPathAasRepositoryResponses = {
    /**
     * Submodel element created successfully
     */
    201: SubmodelElement;
};

export type PostSubmodelElementByPathAasRepositoryResponse = PostSubmodelElementByPathAasRepositoryResponses[keyof PostSubmodelElementByPathAasRepositoryResponses];

export type PutSubmodelElementByPathAasRepositoryData = {
    /**
     * Requested submodel element
     */
    body: SubmodelElement;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}';
};

export type PutSubmodelElementByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutSubmodelElementByPathAasRepositoryError = PutSubmodelElementByPathAasRepositoryErrors[keyof PutSubmodelElementByPathAasRepositoryErrors];

export type PutSubmodelElementByPathAasRepositoryResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutSubmodelElementByPathAasRepositoryResponse = PutSubmodelElementByPathAasRepositoryResponses[keyof PutSubmodelElementByPathAasRepositoryResponses];

export type GetSubmodelElementByPathMetadataAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata';
};

export type GetSubmodelElementByPathMetadataAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathMetadataAasRepositoryError = GetSubmodelElementByPathMetadataAasRepositoryErrors[keyof GetSubmodelElementByPathMetadataAasRepositoryErrors];

export type GetSubmodelElementByPathMetadataAasRepositoryResponses = {
    /**
     * Requested submodel element
     */
    200: SubmodelElementMetadata;
};

export type GetSubmodelElementByPathMetadataAasRepositoryResponse = GetSubmodelElementByPathMetadataAasRepositoryResponses[keyof GetSubmodelElementByPathMetadataAasRepositoryResponses];

export type PatchSubmodelElementValueByPathMetadataData = {
    /**
     * The updated metadata attributes of the submodel element
     */
    body: SubmodelElementMetadata;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata';
};

export type PatchSubmodelElementValueByPathMetadataErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementValueByPathMetadataError = PatchSubmodelElementValueByPathMetadataErrors[keyof PatchSubmodelElementValueByPathMetadataErrors];

export type PatchSubmodelElementValueByPathMetadataResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PatchSubmodelElementValueByPathMetadataResponse = PatchSubmodelElementValueByPathMetadataResponses[keyof PatchSubmodelElementValueByPathMetadataResponses];

export type GetSubmodelElementByPathValueOnlyAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
        /**
         * Determines to which extent the resource is being serialized
         */
        extent?: 'withBlobValue' | 'withoutBlobValue';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value';
};

export type GetSubmodelElementByPathValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathValueOnlyAasRepositoryError = GetSubmodelElementByPathValueOnlyAasRepositoryErrors[keyof GetSubmodelElementByPathValueOnlyAasRepositoryErrors];

export type GetSubmodelElementByPathValueOnlyAasRepositoryResponses = {
    /**
     * Requested submodel element in its ValueOnly representation
     */
    200: SubmodelElementValue;
};

export type GetSubmodelElementByPathValueOnlyAasRepositoryResponse = GetSubmodelElementByPathValueOnlyAasRepositoryResponses[keyof GetSubmodelElementByPathValueOnlyAasRepositoryResponses];

export type PatchSubmodelElementValueByPathValueOnlyData = {
    /**
     * The updated value of the submodel element
     */
    body: SubmodelElementValue;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value';
};

export type PatchSubmodelElementValueByPathValueOnlyErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PatchSubmodelElementValueByPathValueOnlyError = PatchSubmodelElementValueByPathValueOnlyErrors[keyof PatchSubmodelElementValueByPathValueOnlyErrors];

export type PatchSubmodelElementValueByPathValueOnlyResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PatchSubmodelElementValueByPathValueOnlyResponse = PatchSubmodelElementValueByPathValueOnlyResponses[keyof PatchSubmodelElementValueByPathValueOnlyResponses];

export type GetSubmodelElementByPathReferenceAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference';
};

export type GetSubmodelElementByPathReferenceAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathReferenceAasRepositoryError = GetSubmodelElementByPathReferenceAasRepositoryErrors[keyof GetSubmodelElementByPathReferenceAasRepositoryErrors];

export type GetSubmodelElementByPathReferenceAasRepositoryResponses = {
    /**
     * Requested submodel element in its ValueOnly representation
     */
    200: Reference;
};

export type GetSubmodelElementByPathReferenceAasRepositoryResponse = GetSubmodelElementByPathReferenceAasRepositoryResponses[keyof GetSubmodelElementByPathReferenceAasRepositoryResponses];

export type GetSubmodelElementByPathPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: {
        /**
         * Determines the structural depth of the respective resource content
         */
        level?: 'deep' | 'core';
    };
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path';
};

export type GetSubmodelElementByPathPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetSubmodelElementByPathPathAasRepositoryError = GetSubmodelElementByPathPathAasRepositoryErrors[keyof GetSubmodelElementByPathPathAasRepositoryErrors];

export type GetSubmodelElementByPathPathAasRepositoryResponses = {
    /**
     * Requested submodel element in the Path notation
     */
    200: Array<PathItem>;
};

export type GetSubmodelElementByPathPathAasRepositoryResponse = GetSubmodelElementByPathPathAasRepositoryResponses[keyof GetSubmodelElementByPathPathAasRepositoryResponses];

export type DeleteFileByPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type DeleteFileByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type DeleteFileByPathAasRepositoryError = DeleteFileByPathAasRepositoryErrors[keyof DeleteFileByPathAasRepositoryErrors];

export type DeleteFileByPathAasRepositoryResponses = {
    /**
     * Submodel element updated successfully
     */
    200: unknown;
};

export type GetFileByPathAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type GetFileByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetFileByPathAasRepositoryError = GetFileByPathAasRepositoryErrors[keyof GetFileByPathAasRepositoryErrors];

export type GetFileByPathAasRepositoryResponses = {
    /**
     * Requested file
     */
    200: Blob | File;
};

export type GetFileByPathAasRepositoryResponse = GetFileByPathAasRepositoryResponses[keyof GetFileByPathAasRepositoryResponses];

export type PutFileByPathAasRepositoryData = {
    /**
     * File to upload
     */
    body: IdShortPathAttachmentBody;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment';
};

export type PutFileByPathAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type PutFileByPathAasRepositoryError = PutFileByPathAasRepositoryErrors[keyof PutFileByPathAasRepositoryErrors];

export type PutFileByPathAasRepositoryResponses = {
    /**
     * Submodel element updated successfully
     */
    204: void;
};

export type PutFileByPathAasRepositoryResponse = PutFileByPathAasRepositoryResponses[keyof PutFileByPathAasRepositoryResponses];

export type InvokeOperationAasRepositoryData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke';
};

export type InvokeOperationAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAasRepositoryError = InvokeOperationAasRepositoryErrors[keyof InvokeOperationAasRepositoryErrors];

export type InvokeOperationAasRepositoryResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type InvokeOperationAasRepositoryResponse = InvokeOperationAasRepositoryResponses[keyof InvokeOperationAasRepositoryResponses];

export type InvokeOperationValueOnlyAasRepositoryData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value';
};

export type InvokeOperationValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationValueOnlyAasRepositoryError = InvokeOperationValueOnlyAasRepositoryErrors[keyof InvokeOperationValueOnlyAasRepositoryErrors];

export type InvokeOperationValueOnlyAasRepositoryResponses = {
    /**
     * Operation result object
     */
    200: OperationResultValueOnly;
};

export type InvokeOperationValueOnlyAasRepositoryResponse = InvokeOperationValueOnlyAasRepositoryResponses[keyof InvokeOperationValueOnlyAasRepositoryResponses];

export type InvokeOperationAsyncAasRepositoryData = {
    /**
     * Operation request object
     */
    body: OperationRequest;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async';
};

export type InvokeOperationAsyncAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncAasRepositoryError = InvokeOperationAsyncAasRepositoryErrors[keyof InvokeOperationAsyncAasRepositoryErrors];

export type InvokeOperationAsyncAasRepositoryResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type InvokeOperationAsyncValueOnlyAasRepositoryData = {
    /**
     * Operation request object
     */
    body: OperationRequestValueOnly;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value';
};

export type InvokeOperationAsyncValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type InvokeOperationAsyncValueOnlyAasRepositoryError = InvokeOperationAsyncValueOnlyAasRepositoryErrors[keyof InvokeOperationAsyncValueOnlyAasRepositoryErrors];

export type InvokeOperationAsyncValueOnlyAasRepositoryResponses = {
    /**
     * The server has accepted the request.
     */
    202: unknown;
};

export type GetOperationAsyncStatusAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}';
};

export type GetOperationAsyncStatusAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncStatusAasRepositoryError = GetOperationAsyncStatusAasRepositoryErrors[keyof GetOperationAsyncStatusAasRepositoryErrors];

export type GetOperationAsyncStatusAasRepositoryResponses = {
    /**
     * Operation result object containing information that the 'executionState' is still 'Running'
     */
    200: BaseOperationResult;
};

export type GetOperationAsyncStatusAasRepositoryResponse = GetOperationAsyncStatusAasRepositoryResponses[keyof GetOperationAsyncStatusAasRepositoryResponses];

export type GetOperationAsyncResultAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}';
};

export type GetOperationAsyncResultAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultAasRepositoryError = GetOperationAsyncResultAasRepositoryErrors[keyof GetOperationAsyncResultAasRepositoryErrors];

export type GetOperationAsyncResultAasRepositoryResponses = {
    /**
     * Operation result object
     */
    200: OperationResult;
};

export type GetOperationAsyncResultAasRepositoryResponse = GetOperationAsyncResultAasRepositoryResponses[keyof GetOperationAsyncResultAasRepositoryResponses];

export type GetOperationAsyncResultValueOnlyAasRepositoryData = {
    body?: never;
    path: {
        /**
         * The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         */
        aasIdentifier: string;
        /**
         * The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         */
        submodelIdentifier: string;
        /**
         * IdShort path to the submodel element (dot-separated)
         */
        idShortPath: string;
        /**
         * The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         */
        handleId: string;
    };
    query?: never;
    url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value';
};

export type GetOperationAsyncResultValueOnlyAasRepositoryErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Not Found
     */
    404: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GetOperationAsyncResultValueOnlyAasRepositoryError = GetOperationAsyncResultValueOnlyAasRepositoryErrors[keyof GetOperationAsyncResultValueOnlyAasRepositoryErrors];

export type GetOperationAsyncResultValueOnlyAasRepositoryResponses = {
    /**
     * Operation result object
     */
    200: OperationResultValueOnly;
};

export type GetOperationAsyncResultValueOnlyAasRepositoryResponse = GetOperationAsyncResultValueOnlyAasRepositoryResponses[keyof GetOperationAsyncResultValueOnlyAasRepositoryResponses];

export type GenerateSerializationByIdsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The Asset Administration Shells' unique ids (UTF8-BASE64-URL-encoded)
         */
        aasIds?: Array<string>;
        /**
         * The Submodels' unique ids (UTF8-BASE64-URL-encoded)
         */
        submodelIds?: Array<string>;
        /**
         * Include Concept Descriptions?
         */
        includeConceptDescriptions?: boolean;
    };
    url: '/serialization';
};

export type GenerateSerializationByIdsErrors = {
    /**
     * Bad Request, e.g. the request parameters of the format of the request body is wrong.
     */
    400: Result;
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
    /**
     * Internal Server Error
     */
    500: Result;
    /**
     * Default error handling for unmentioned status codes
     */
    default: Result;
};

export type GenerateSerializationByIdsError = GenerateSerializationByIdsErrors[keyof GenerateSerializationByIdsErrors];

export type GenerateSerializationByIdsResponses = {
    /**
     * AASX package
     */
    200: Blob | File;
};

export type GenerateSerializationByIdsResponse = GenerateSerializationByIdsResponses[keyof GenerateSerializationByIdsResponses];

export type GetDescriptionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/description';
};

export type GetDescriptionErrors = {
    /**
     * Unauthorized, e.g. the server refused the authorization attempt.
     */
    401: Result;
    /**
     * Forbidden
     */
    403: Result;
};

export type GetDescriptionError = GetDescriptionErrors[keyof GetDescriptionErrors];

export type GetDescriptionResponses = {
    /**
     * Requested Description
     */
    200: ServiceDescription;
};

export type GetDescriptionResponse = GetDescriptionResponses[keyof GetDescriptionResponses];