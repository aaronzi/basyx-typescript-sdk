// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetAllAssetAdministrationShellsData, GetAllAssetAdministrationShellsResponse, GetAllAssetAdministrationShellsError, PostAssetAdministrationShellData, PostAssetAdministrationShellResponse, PostAssetAdministrationShellError, GetAllAssetAdministrationShellsReferenceData, GetAllAssetAdministrationShellsReferenceResponse, GetAllAssetAdministrationShellsReferenceError, DeleteAssetAdministrationShellByIdData, DeleteAssetAdministrationShellByIdResponse, DeleteAssetAdministrationShellByIdError, GetAssetAdministrationShellByIdData, GetAssetAdministrationShellByIdResponse, GetAssetAdministrationShellByIdError, PutAssetAdministrationShellByIdData, PutAssetAdministrationShellByIdResponse, PutAssetAdministrationShellByIdError, GetAssetAdministrationShellByIdReferenceAasRepositoryData, GetAssetAdministrationShellByIdReferenceAasRepositoryResponse, GetAssetAdministrationShellByIdReferenceAasRepositoryError, GetAssetInformationAasRepositoryData, GetAssetInformationAasRepositoryResponse, GetAssetInformationAasRepositoryError, PutAssetInformationAasRepositoryData, PutAssetInformationAasRepositoryResponse, PutAssetInformationAasRepositoryError, DeleteThumbnailAasRepositoryData, DeleteThumbnailAasRepositoryError, GetThumbnailAasRepositoryData, GetThumbnailAasRepositoryResponse, GetThumbnailAasRepositoryError, PutThumbnailAasRepositoryData, PutThumbnailAasRepositoryResponse, PutThumbnailAasRepositoryError, GetAllSubmodelReferencesAasRepositoryData, GetAllSubmodelReferencesAasRepositoryResponse, GetAllSubmodelReferencesAasRepositoryError, PostSubmodelReferenceAasRepositoryData, PostSubmodelReferenceAasRepositoryResponse, PostSubmodelReferenceAasRepositoryError, DeleteSubmodelReferenceByIdAasRepositoryData, DeleteSubmodelReferenceByIdAasRepositoryResponse, DeleteSubmodelReferenceByIdAasRepositoryError, DeleteSubmodelByIdAasRepositoryData, DeleteSubmodelByIdAasRepositoryResponse, DeleteSubmodelByIdAasRepositoryError, GetSubmodelByIdAasRepositoryData, GetSubmodelByIdAasRepositoryResponse, GetSubmodelByIdAasRepositoryError, PatchSubmodelAasRepositoryData, PatchSubmodelAasRepositoryResponse, PatchSubmodelAasRepositoryError, PutSubmodelByIdAasRepositoryData, PutSubmodelByIdAasRepositoryResponse, PutSubmodelByIdAasRepositoryError, GetSubmodelByIdMetadataAasRepositoryData, GetSubmodelByIdMetadataAasRepositoryResponse, GetSubmodelByIdMetadataAasRepositoryError, PatchSubmodelByIdMetadataAasRepositoryData, PatchSubmodelByIdMetadataAasRepositoryResponse, PatchSubmodelByIdMetadataAasRepositoryError, GetSubmodelByIdValueOnlyAasRepositoryData, GetSubmodelByIdValueOnlyAasRepositoryResponse, GetSubmodelByIdValueOnlyAasRepositoryError, PatchSubmodelByIdValueOnlyAasRepositoryData, PatchSubmodelByIdValueOnlyAasRepositoryResponse, PatchSubmodelByIdValueOnlyAasRepositoryError, GetSubmodelByIdReferenceAasRepositoryData, GetSubmodelByIdReferenceAasRepositoryResponse, GetSubmodelByIdReferenceAasRepositoryError, GetSubmodelByIdPathAasRepositoryData, GetSubmodelByIdPathAasRepositoryResponse, GetSubmodelByIdPathAasRepositoryError, GetAllSubmodelElementsAasRepositoryData, GetAllSubmodelElementsAasRepositoryResponse, GetAllSubmodelElementsAasRepositoryError, PostSubmodelElementAasRepositoryData, PostSubmodelElementAasRepositoryResponse, PostSubmodelElementAasRepositoryError, GetAllSubmodelElementsMetadataAasRepositoryData, GetAllSubmodelElementsMetadataAasRepositoryResponse, GetAllSubmodelElementsMetadataAasRepositoryError, GetAllSubmodelElementsValueOnlyAasRepositoryData, GetAllSubmodelElementsValueOnlyAasRepositoryResponse, GetAllSubmodelElementsValueOnlyAasRepositoryError, GetAllSubmodelElementsReferenceAasRepositoryData, GetAllSubmodelElementsReferenceAasRepositoryResponse, GetAllSubmodelElementsReferenceAasRepositoryError, GetAllSubmodelElementsPathAasRepositoryData, GetAllSubmodelElementsPathAasRepositoryResponse, GetAllSubmodelElementsPathAasRepositoryError, DeleteSubmodelElementByPathAasRepositoryData, DeleteSubmodelElementByPathAasRepositoryResponse, DeleteSubmodelElementByPathAasRepositoryError, GetSubmodelElementByPathAasRepositoryData, GetSubmodelElementByPathAasRepositoryResponse, GetSubmodelElementByPathAasRepositoryError, PatchSubmodelElementValueByPathAasRepositoryData, PatchSubmodelElementValueByPathAasRepositoryResponse, PatchSubmodelElementValueByPathAasRepositoryError, PostSubmodelElementByPathAasRepositoryData, PostSubmodelElementByPathAasRepositoryResponse, PostSubmodelElementByPathAasRepositoryError, PutSubmodelElementByPathAasRepositoryData, PutSubmodelElementByPathAasRepositoryResponse, PutSubmodelElementByPathAasRepositoryError, GetSubmodelElementByPathMetadataAasRepositoryData, GetSubmodelElementByPathMetadataAasRepositoryResponse, GetSubmodelElementByPathMetadataAasRepositoryError, PatchSubmodelElementValueByPathMetadataData, PatchSubmodelElementValueByPathMetadataResponse, PatchSubmodelElementValueByPathMetadataError, GetSubmodelElementByPathValueOnlyAasRepositoryData, GetSubmodelElementByPathValueOnlyAasRepositoryResponse, GetSubmodelElementByPathValueOnlyAasRepositoryError, PatchSubmodelElementValueByPathValueOnlyData, PatchSubmodelElementValueByPathValueOnlyResponse, PatchSubmodelElementValueByPathValueOnlyError, GetSubmodelElementByPathReferenceAasRepositoryData, GetSubmodelElementByPathReferenceAasRepositoryResponse, GetSubmodelElementByPathReferenceAasRepositoryError, GetSubmodelElementByPathPathAasRepositoryData, GetSubmodelElementByPathPathAasRepositoryResponse, GetSubmodelElementByPathPathAasRepositoryError, DeleteFileByPathAasRepositoryData, DeleteFileByPathAasRepositoryError, GetFileByPathAasRepositoryData, GetFileByPathAasRepositoryResponse, GetFileByPathAasRepositoryError, PutFileByPathAasRepositoryData, PutFileByPathAasRepositoryResponse, PutFileByPathAasRepositoryError, InvokeOperationAasRepositoryData, InvokeOperationAasRepositoryResponse, InvokeOperationAasRepositoryError, InvokeOperationValueOnlyAasRepositoryData, InvokeOperationValueOnlyAasRepositoryResponse, InvokeOperationValueOnlyAasRepositoryError, InvokeOperationAsyncAasRepositoryData, InvokeOperationAsyncAasRepositoryError, InvokeOperationAsyncValueOnlyAasRepositoryData, InvokeOperationAsyncValueOnlyAasRepositoryError, GetOperationAsyncStatusAasRepositoryData, GetOperationAsyncStatusAasRepositoryResponse, GetOperationAsyncStatusAasRepositoryError, GetOperationAsyncResultAasRepositoryData, GetOperationAsyncResultAasRepositoryResponse, GetOperationAsyncResultAasRepositoryError, GetOperationAsyncResultValueOnlyAasRepositoryData, GetOperationAsyncResultValueOnlyAasRepositoryResponse, GetOperationAsyncResultValueOnlyAasRepositoryError, GenerateSerializationByIdsData, GenerateSerializationByIdsResponse, GenerateSerializationByIdsError, GetDescriptionData, GetDescriptionResponse, GetDescriptionError } from './types.gen';

export const client = createClient(createConfig());

/**
 * Returns all Asset Administration Shells
 */
export const getAllAssetAdministrationShells = <ThrowOnError extends boolean = false>(options?: Options<GetAllAssetAdministrationShellsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllAssetAdministrationShellsResponse, GetAllAssetAdministrationShellsError, ThrowOnError>({
        url: '/shells',
        ...options
    });
};

/**
 * Creates a new Asset Administration Shell
 */
export const postAssetAdministrationShell = <ThrowOnError extends boolean = false>(options: Options<PostAssetAdministrationShellData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAssetAdministrationShellResponse, PostAssetAdministrationShellError, ThrowOnError>({
        url: '/shells',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns References to all Asset Administration Shells
 */
export const getAllAssetAdministrationShellsReference = <ThrowOnError extends boolean = false>(options?: Options<GetAllAssetAdministrationShellsReferenceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllAssetAdministrationShellsReferenceResponse, GetAllAssetAdministrationShellsReferenceError, ThrowOnError>({
        url: '/shells/$reference',
        ...options
    });
};

/**
 * Deletes an Asset Administration Shell
 */
export const deleteAssetAdministrationShellById = <ThrowOnError extends boolean = false>(options: Options<DeleteAssetAdministrationShellByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAssetAdministrationShellByIdResponse, DeleteAssetAdministrationShellByIdError, ThrowOnError>({
        url: '/shells/{aasIdentifier}',
        ...options
    });
};

/**
 * Returns a specific Asset Administration Shell
 */
export const getAssetAdministrationShellById = <ThrowOnError extends boolean = false>(options: Options<GetAssetAdministrationShellByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAssetAdministrationShellByIdResponse, GetAssetAdministrationShellByIdError, ThrowOnError>({
        url: '/shells/{aasIdentifier}',
        ...options
    });
};

/**
 * Updates an existing Asset Administration Shell
 */
export const putAssetAdministrationShellById = <ThrowOnError extends boolean = false>(options: Options<PutAssetAdministrationShellByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutAssetAdministrationShellByIdResponse, PutAssetAdministrationShellByIdError, ThrowOnError>({
        url: '/shells/{aasIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns a specific Asset Administration Shell as a Reference
 */
export const getAssetAdministrationShellByIdReferenceAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetAssetAdministrationShellByIdReferenceAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAssetAdministrationShellByIdReferenceAasRepositoryResponse, GetAssetAdministrationShellByIdReferenceAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/$reference',
        ...options
    });
};

/**
 * Returns the Asset Information
 */
export const getAssetInformationAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetAssetInformationAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAssetInformationAasRepositoryResponse, GetAssetInformationAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/asset-information',
        ...options
    });
};

/**
 * Updates the Asset Information
 */
export const putAssetInformationAasRepository = <ThrowOnError extends boolean = false>(options: Options<PutAssetInformationAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutAssetInformationAasRepositoryResponse, PutAssetInformationAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/asset-information',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteThumbnailAasRepository = <ThrowOnError extends boolean = false>(options: Options<DeleteThumbnailAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteThumbnailAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/asset-information/thumbnail',
        ...options
    });
};

export const getThumbnailAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetThumbnailAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetThumbnailAasRepositoryResponse, GetThumbnailAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/asset-information/thumbnail',
        ...options
    });
};

export const putThumbnailAasRepository = <ThrowOnError extends boolean = false>(options: Options<PutThumbnailAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutThumbnailAasRepositoryResponse, PutThumbnailAasRepositoryError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/shells/{aasIdentifier}/asset-information/thumbnail',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Returns all submodel references
 */
export const getAllSubmodelReferencesAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetAllSubmodelReferencesAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllSubmodelReferencesAasRepositoryResponse, GetAllSubmodelReferencesAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodel-refs',
        ...options
    });
};

/**
 * Creates a submodel reference at the Asset Administration Shell
 */
export const postSubmodelReferenceAasRepository = <ThrowOnError extends boolean = false>(options: Options<PostSubmodelReferenceAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubmodelReferenceAasRepositoryResponse, PostSubmodelReferenceAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodel-refs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
 */
export const deleteSubmodelReferenceByIdAasRepository = <ThrowOnError extends boolean = false>(options: Options<DeleteSubmodelReferenceByIdAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSubmodelReferenceByIdAasRepositoryResponse, DeleteSubmodelReferenceByIdAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}',
        ...options
    });
};

/**
 * Deletes the submodel from the Asset Administration Shell and the Repository.
 */
export const deleteSubmodelByIdAasRepository = <ThrowOnError extends boolean = false>(options: Options<DeleteSubmodelByIdAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSubmodelByIdAasRepositoryResponse, DeleteSubmodelByIdAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}',
        ...options
    });
};

/**
 * Returns the Submodel
 */
export const getSubmodelByIdAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelByIdAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelByIdAasRepositoryResponse, GetSubmodelByIdAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}',
        ...options
    });
};

/**
 * Updates the Submodel
 */
export const patchSubmodelAasRepository = <ThrowOnError extends boolean = false>(options: Options<PatchSubmodelAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchSubmodelAasRepositoryResponse, PatchSubmodelAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Updates the Submodel
 */
export const putSubmodelByIdAasRepository = <ThrowOnError extends boolean = false>(options: Options<PutSubmodelByIdAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutSubmodelByIdAasRepositoryResponse, PutSubmodelByIdAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the Submodel's metadata elements
 */
export const getSubmodelByIdMetadataAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelByIdMetadataAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelByIdMetadataAasRepositoryResponse, GetSubmodelByIdMetadataAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata',
        ...options
    });
};

/**
 * Updates the metadata attributes of the Submodel
 */
export const patchSubmodelByIdMetadataAasRepository = <ThrowOnError extends boolean = false>(options: Options<PatchSubmodelByIdMetadataAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchSubmodelByIdMetadataAasRepositoryResponse, PatchSubmodelByIdMetadataAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the Submodel's ValueOnly representation
 */
export const getSubmodelByIdValueOnlyAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelByIdValueOnlyAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelByIdValueOnlyAasRepositoryResponse, GetSubmodelByIdValueOnlyAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value',
        ...options
    });
};

/**
 * Updates the values of the Submodel
 */
export const patchSubmodelByIdValueOnlyAasRepository = <ThrowOnError extends boolean = false>(options: Options<PatchSubmodelByIdValueOnlyAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchSubmodelByIdValueOnlyAasRepositoryResponse, PatchSubmodelByIdValueOnlyAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the Submodel as a Reference
 */
export const getSubmodelByIdReferenceAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelByIdReferenceAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelByIdReferenceAasRepositoryResponse, GetSubmodelByIdReferenceAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference',
        ...options
    });
};

/**
 * Returns the Submodel's metadata elements
 */
export const getSubmodelByIdPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelByIdPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelByIdPathAasRepositoryResponse, GetSubmodelByIdPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$path',
        ...options
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetAllSubmodelElementsAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllSubmodelElementsAasRepositoryResponse, GetAllSubmodelElementsAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements',
        ...options
    });
};

/**
 * Creates a new submodel element
 */
export const postSubmodelElementAasRepository = <ThrowOnError extends boolean = false>(options: Options<PostSubmodelElementAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubmodelElementAasRepositoryResponse, PostSubmodelElementAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsMetadataAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetAllSubmodelElementsMetadataAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllSubmodelElementsMetadataAasRepositoryResponse, GetAllSubmodelElementsMetadataAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$metadata',
        ...options
    });
};

/**
 * Returns all submodel elements including their hierarchy in the ValueOnly representation
 */
export const getAllSubmodelElementsValueOnlyAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetAllSubmodelElementsValueOnlyAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllSubmodelElementsValueOnlyAasRepositoryResponse, GetAllSubmodelElementsValueOnlyAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$value',
        ...options
    });
};

/**
 * Returns all submodel elements as a list of References
 */
export const getAllSubmodelElementsReferenceAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetAllSubmodelElementsReferenceAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllSubmodelElementsReferenceAasRepositoryResponse, GetAllSubmodelElementsReferenceAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$reference',
        ...options
    });
};

/**
 * Returns all submodel elements including their hierarchy
 */
export const getAllSubmodelElementsPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetAllSubmodelElementsPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllSubmodelElementsPathAasRepositoryResponse, GetAllSubmodelElementsPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$path',
        ...options
    });
};

/**
 * Deletes a submodel element at a specified path within the submodel elements hierarchy
 */
export const deleteSubmodelElementByPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<DeleteSubmodelElementByPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSubmodelElementByPathAasRepositoryResponse, DeleteSubmodelElementByPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelElementByPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelElementByPathAasRepositoryResponse, GetSubmodelElementByPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options
    });
};

/**
 * Updates an existing submodel element value at a specified path within submodel elements hierarchy
 */
export const patchSubmodelElementValueByPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<PatchSubmodelElementValueByPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchSubmodelElementValueByPathAasRepositoryResponse, PatchSubmodelElementValueByPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Creates a new submodel element at a specified path within submodel elements hierarchy
 */
export const postSubmodelElementByPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<PostSubmodelElementByPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubmodelElementByPathAasRepositoryResponse, PostSubmodelElementByPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Updates an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putSubmodelElementByPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<PutSubmodelElementByPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutSubmodelElementByPathAasRepositoryResponse, PutSubmodelElementByPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathMetadataAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelElementByPathMetadataAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelElementByPathMetadataAasRepositoryResponse, GetSubmodelElementByPathMetadataAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata',
        ...options
    });
};

/**
 * Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
 */
export const patchSubmodelElementValueByPathMetadata = <ThrowOnError extends boolean = false>(options: Options<PatchSubmodelElementValueByPathMetadataData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchSubmodelElementValueByPathMetadataResponse, PatchSubmodelElementValueByPathMetadataError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
 */
export const getSubmodelElementByPathValueOnlyAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelElementByPathValueOnlyAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelElementByPathValueOnlyAasRepositoryResponse, GetSubmodelElementByPathValueOnlyAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value',
        ...options
    });
};

/**
 * Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
 */
export const patchSubmodelElementValueByPathValueOnly = <ThrowOnError extends boolean = false>(options: Options<PatchSubmodelElementValueByPathValueOnlyData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchSubmodelElementValueByPathValueOnlyResponse, PatchSubmodelElementValueByPathValueOnlyError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        body: options?.body as number | Record<string, unknown> | BodyInit | Record<string, unknown>[] | unknown[] | null | undefined
    });
};

/**
 * Returns the Reference of a specific submodel element from the Submodel at a specified path
 */
export const getSubmodelElementByPathReferenceAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelElementByPathReferenceAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelElementByPathReferenceAasRepositoryResponse, GetSubmodelElementByPathReferenceAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference',
        ...options
    });
};

/**
 * Returns a specific submodel element from the Submodel at a specified path in the Path notation
 */
export const getSubmodelElementByPathPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetSubmodelElementByPathPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubmodelElementByPathPathAasRepositoryResponse, GetSubmodelElementByPathPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path',
        ...options
    });
};

/**
 * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
 */
export const deleteFileByPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<DeleteFileByPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteFileByPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options
    });
};

/**
 * Downloads file content from a specific submodel element from the Submodel at a specified path
 */
export const getFileByPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetFileByPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFileByPathAasRepositoryResponse, GetFileByPathAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options
    });
};

/**
 * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
 */
export const putFileByPathAasRepository = <ThrowOnError extends boolean = false>(options: Options<PutFileByPathAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutFileByPathAasRepositoryResponse, PutFileByPathAasRepositoryError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationAasRepository = <ThrowOnError extends boolean = false>(options: Options<InvokeOperationAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<InvokeOperationAasRepositoryResponse, InvokeOperationAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Synchronously invokes an Operation at a specified path
 */
export const invokeOperationValueOnlyAasRepository = <ThrowOnError extends boolean = false>(options: Options<InvokeOperationValueOnlyAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<InvokeOperationValueOnlyAasRepositoryResponse, InvokeOperationValueOnlyAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asynchronously invokes an Operation at a specified path
 */
export const invokeOperationAsyncAasRepository = <ThrowOnError extends boolean = false>(options: Options<InvokeOperationAsyncAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asynchronously invokes an Operation at a specified path
 */
export const invokeOperationAsyncValueOnlyAasRepository = <ThrowOnError extends boolean = false>(options: Options<InvokeOperationAsyncValueOnlyAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, InvokeOperationAsyncValueOnlyAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the Operation status of an asynchronous invoked Operation
 */
export const getOperationAsyncStatusAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetOperationAsyncStatusAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOperationAsyncStatusAasRepositoryResponse, GetOperationAsyncStatusAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}',
        ...options
    });
};

/**
 * Returns the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResultAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetOperationAsyncResultAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOperationAsyncResultAasRepositoryResponse, GetOperationAsyncResultAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}',
        ...options
    });
};

/**
 * Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation
 */
export const getOperationAsyncResultValueOnlyAasRepository = <ThrowOnError extends boolean = false>(options: Options<GetOperationAsyncResultValueOnlyAasRepositoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOperationAsyncResultValueOnlyAasRepositoryResponse, GetOperationAsyncResultValueOnlyAasRepositoryError, ThrowOnError>({
        url: '/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value',
        ...options
    });
};

/**
 * Returns an appropriate serialization based on the specified format (see SerializationFormat)
 */
export const generateSerializationByIds = <ThrowOnError extends boolean = false>(options?: Options<GenerateSerializationByIdsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenerateSerializationByIdsResponse, GenerateSerializationByIdsError, ThrowOnError>({
        url: '/serialization',
        ...options
    });
};

/**
 * Returns the self-describing information of a network resource (ServiceDescription)
 */
export const getDescription = <ThrowOnError extends boolean = false>(options?: Options<GetDescriptionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDescriptionResponse, GetDescriptionError, ThrowOnError>({
        url: '/description',
        ...options
    });
};