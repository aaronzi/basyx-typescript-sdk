/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * OpenAPI spec version: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "{protocol}://{host_name}:{port}/api/{version_prefix}".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        this.configuration = configuration;
        this.basePath = configuration.basePath || this.basePath;
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum AasSubmodelElements {
    AnnotatedRelationshipElement = <any> 'AnnotatedRelationshipElement',
    BasicEventElement = <any> 'BasicEventElement',
    Blob = <any> 'Blob',
    Capability = <any> 'Capability',
    DataElement = <any> 'DataElement',
    Entity = <any> 'Entity',
    EventElement = <any> 'EventElement',
    File = <any> 'File',
    MultiLanguageProperty = <any> 'MultiLanguageProperty',
    Operation = <any> 'Operation',
    Property = <any> 'Property',
    Range = <any> 'Range',
    ReferenceElement = <any> 'ReferenceElement',
    RelationshipElement = <any> 'RelationshipElement',
    SubmodelElement = <any> 'SubmodelElement',
    SubmodelElementCollection = <any> 'SubmodelElementCollection',
    SubmodelElementList = <any> 'SubmodelElementList'
}
/**
 * 
 * @export
 * @interface AbstractLangString
 */
export interface AbstractLangString {
    /**
     * 
     * @type {string}
     * @memberof AbstractLangString
     */
    language: string;
    /**
     * 
     * @type {string}
     * @memberof AbstractLangString
     */
    text: string;
}
/**
 * 
 * @export
 * @interface AdministrativeInformation
 */
export interface AdministrativeInformation extends HasDataSpecification {
    /**
     * 
     * @type {any}
     * @memberof AdministrativeInformation
     */
    version?: any;
    /**
     * 
     * @type {any}
     * @memberof AdministrativeInformation
     */
    revision?: any;
    /**
     * 
     * @type {Reference}
     * @memberof AdministrativeInformation
     */
    creator?: Reference;
    /**
     * 
     * @type {string}
     * @memberof AdministrativeInformation
     */
    templateId?: string;
}
/**
 * 
 * @export
 * @interface AnnotatedRelationshipElement
 */
export interface AnnotatedRelationshipElement extends RelationshipElementAbstract {
    /**
     * 
     * @type {Array<DataElementChoice>}
     * @memberof AnnotatedRelationshipElement
     */
    annotations?: Array<DataElementChoice>;
    /**
     * 
     * @type {ModelType}
     * @memberof AnnotatedRelationshipElement
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface AnnotatedRelationshipElementMetadata
 */
export interface AnnotatedRelationshipElementMetadata extends Referable1 {
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof AnnotatedRelationshipElementMetadata
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
    /**
     * 
     * @type {Reference}
     * @memberof AnnotatedRelationshipElementMetadata
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof AnnotatedRelationshipElementMetadata
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {Array<Qualifier1>}
     * @memberof AnnotatedRelationshipElementMetadata
     */
    qualifiers?: Array<Qualifier1>;
    /**
     * 
     * @type {ModelType}
     * @memberof AnnotatedRelationshipElementMetadata
     */
    modelType: ModelType;
    /**
     * 
     * @type {ModellingKind}
     * @memberof AnnotatedRelationshipElementMetadata
     */
    kind?: ModellingKind;
}
/**
 * 
 * @export
 * @interface AnnotatedRelationshipElementValue
 */
export interface AnnotatedRelationshipElementValue {
    /**
     * 
     * @type {ReferenceValue}
     * @memberof AnnotatedRelationshipElementValue
     */
    first: ReferenceValue;
    /**
     * 
     * @type {ReferenceValue}
     * @memberof AnnotatedRelationshipElementValue
     */
    second: ReferenceValue;
    /**
     * 
     * @type {Array<ValueOnly>}
     * @memberof AnnotatedRelationshipElementValue
     */
    annotations?: Array<ValueOnly>;
}
/**
 * 
 * @export
 * @interface AssetAdministrationShell
 */
export interface AssetAdministrationShell extends Identifiable {
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof AssetAdministrationShell
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
    /**
     * 
     * @type {Reference}
     * @memberof AssetAdministrationShell
     */
    derivedFrom?: Reference;
    /**
     * 
     * @type {AssetInformation}
     * @memberof AssetAdministrationShell
     */
    assetInformation: AssetInformation;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof AssetAdministrationShell
     */
    submodels?: Array<Reference>;
    /**
     * 
     * @type {ModelType}
     * @memberof AssetAdministrationShell
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface AssetInformation
 */
export interface AssetInformation {
    /**
     * 
     * @type {AssetKind}
     * @memberof AssetInformation
     */
    assetKind: AssetKind;
    /**
     * 
     * @type {string}
     * @memberof AssetInformation
     */
    globalAssetId?: string;
    /**
     * 
     * @type {Array<SpecificAssetId>}
     * @memberof AssetInformation
     */
    specificAssetIds?: Array<SpecificAssetId>;
    /**
     * 
     * @type {string}
     * @memberof AssetInformation
     */
    assetType?: string;
    /**
     * 
     * @type {Resource}
     * @memberof AssetInformation
     */
    defaultThumbnail?: Resource;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum AssetKind {
    Instance = <any> 'Instance',
    NotApplicable = <any> 'NotApplicable',
    Type = <any> 'Type'
}
/**
 * 
 * @export
 * @interface AssetinformationThumbnailBody
 */
export interface AssetinformationThumbnailBody {
    /**
     * 
     * @type {string}
     * @memberof AssetinformationThumbnailBody
     */
    fileName?: string;
    /**
     * 
     * @type {Blob}
     * @memberof AssetinformationThumbnailBody
     */
    file?: Blob;
}
/**
 * 
 * @export
 * @interface BaseOperationResult
 */
export interface BaseOperationResult extends Result {
    /**
     * 
     * @type {ExecutionState}
     * @memberof BaseOperationResult
     */
    executionState?: ExecutionState;
    /**
     * 
     * @type {boolean}
     * @memberof BaseOperationResult
     */
    success?: boolean;
}
/**
 * 
 * @export
 * @interface BasicEventElement
 */
export interface BasicEventElement extends EventElement {
    /**
     * 
     * @type {Reference}
     * @memberof BasicEventElement
     */
    observed: Reference;
    /**
     * 
     * @type {Direction}
     * @memberof BasicEventElement
     */
    direction: Direction;
    /**
     * 
     * @type {StateOfEvent}
     * @memberof BasicEventElement
     */
    state: StateOfEvent;
    /**
     * 
     * @type {string}
     * @memberof BasicEventElement
     */
    messageTopic?: string;
    /**
     * 
     * @type {Reference}
     * @memberof BasicEventElement
     */
    messageBroker?: Reference;
    /**
     * 
     * @type {string}
     * @memberof BasicEventElement
     */
    lastUpdate?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicEventElement
     */
    minInterval?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicEventElement
     */
    maxInterval?: string;
    /**
     * 
     * @type {ModelType}
     * @memberof BasicEventElement
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface BasicEventElementMetadata
 */
export interface BasicEventElementMetadata extends SubmodelElementAttributes {
    /**
     * 
     * @type {Direction}
     * @memberof BasicEventElementMetadata
     */
    direction?: Direction;
    /**
     * 
     * @type {StateOfEvent}
     * @memberof BasicEventElementMetadata
     */
    state?: StateOfEvent;
    /**
     * 
     * @type {string}
     * @memberof BasicEventElementMetadata
     */
    messageTopic?: string;
    /**
     * 
     * @type {Reference}
     * @memberof BasicEventElementMetadata
     */
    messageBroker?: Reference;
    /**
     * 
     * @type {string}
     * @memberof BasicEventElementMetadata
     */
    lastUpdate?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicEventElementMetadata
     */
    minInterval?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicEventElementMetadata
     */
    maxInterval?: string;
}
/**
 * 
 * @export
 * @interface BasicEventElementValue
 */
export interface BasicEventElementValue {
    /**
     * 
     * @type {ReferenceValue}
     * @memberof BasicEventElementValue
     */
    observed: ReferenceValue;
}
/**
 * 
 * @export
 * @interface Blob
 */
export interface Blob extends DataElement {
    /**
     * 
     * @type {string}
     * @memberof Blob
     */
    value?: string;
    /**
     * 
     * @type {any}
     * @memberof Blob
     */
    contentType: any;
    /**
     * 
     * @type {ModelType}
     * @memberof Blob
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface BlobMetadata
 */
export interface BlobMetadata extends Referable1 {
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof BlobMetadata
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
    /**
     * 
     * @type {Reference}
     * @memberof BlobMetadata
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof BlobMetadata
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {Array<Qualifier1>}
     * @memberof BlobMetadata
     */
    qualifiers?: Array<Qualifier1>;
    /**
     * 
     * @type {ModelType}
     * @memberof BlobMetadata
     */
    modelType: ModelType;
    /**
     * 
     * @type {ModellingKind}
     * @memberof BlobMetadata
     */
    kind?: ModellingKind;
}
/**
 * 
 * @export
 * @interface BlobValue
 */
export interface BlobValue {
    /**
     * 
     * @type {string}
     * @memberof BlobValue
     */
    contentType: string;
    /**
     * 
     * @type {string}
     * @memberof BlobValue
     */
    value: string;
}
/**
 * 
 * @export
 */
export type BooleanValue = boolean
/**
 * 
 * @export
 * @interface Capability
 */
export interface Capability extends SubmodelElement {
    /**
     * 
     * @type {ModelType}
     * @memberof Capability
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface CapabilityMetadata
 */
export interface CapabilityMetadata extends SubmodelElementAttributes {
}
/**
 * 
 * @export
 * @interface ConceptDescription
 */
export interface ConceptDescription extends Identifiable {
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof ConceptDescription
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof ConceptDescription
     */
    isCaseOf?: Array<Reference>;
    /**
     * 
     * @type {ModelType}
     * @memberof ConceptDescription
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface DataElement
 */
export interface DataElement extends Referable {
    /**
     * 
     * @type {Reference}
     * @memberof DataElement
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof DataElement
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {Array<Qualifier>}
     * @memberof DataElement
     */
    qualifiers?: Array<Qualifier>;
    /**
     * 
     * @type {ModelType}
     * @memberof DataElement
     */
    modelType: ModelType;
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof DataElement
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
}
/**
 * 
 * @export
 * @interface DataElementChoice
 */
export interface DataElementChoice {
}
/**
 * 
 * @export
 * @interface DataSpecificationContent
 */
export interface DataSpecificationContent {
    /**
     * 
     * @type {ModelType}
     * @memberof DataSpecificationContent
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface DataSpecificationContentChoice
 */
export interface DataSpecificationContentChoice {
}
/**
 * 
 * @export
 * @interface DataSpecificationIec61360
 */
export interface DataSpecificationIec61360 extends DataSpecificationContent {
    /**
     * 
     * @type {Array<LangStringPreferredNameTypeIec61360>}
     * @memberof DataSpecificationIec61360
     */
    preferredName: Array<LangStringPreferredNameTypeIec61360>;
    /**
     * 
     * @type {Array<LangStringShortNameTypeIec61360>}
     * @memberof DataSpecificationIec61360
     */
    shortName?: Array<LangStringShortNameTypeIec61360>;
    /**
     * 
     * @type {string}
     * @memberof DataSpecificationIec61360
     */
    unit?: string;
    /**
     * 
     * @type {Reference}
     * @memberof DataSpecificationIec61360
     */
    unitId?: Reference;
    /**
     * 
     * @type {string}
     * @memberof DataSpecificationIec61360
     */
    sourceOfDefinition?: string;
    /**
     * 
     * @type {string}
     * @memberof DataSpecificationIec61360
     */
    symbol?: string;
    /**
     * 
     * @type {DataTypeIec61360}
     * @memberof DataSpecificationIec61360
     */
    dataType?: DataTypeIec61360;
    /**
     * 
     * @type {Array<LangStringDefinitionTypeIec61360>}
     * @memberof DataSpecificationIec61360
     */
    definition?: Array<LangStringDefinitionTypeIec61360>;
    /**
     * 
     * @type {string}
     * @memberof DataSpecificationIec61360
     */
    valueFormat?: string;
    /**
     * 
     * @type {ValueList}
     * @memberof DataSpecificationIec61360
     */
    valueList?: ValueList;
    /**
     * 
     * @type {string}
     * @memberof DataSpecificationIec61360
     */
    value?: string;
    /**
     * 
     * @type {LevelType}
     * @memberof DataSpecificationIec61360
     */
    levelType?: LevelType;
    /**
     * 
     * @type {ModelType}
     * @memberof DataSpecificationIec61360
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum DataTypeDefXsd {
    AnyURI = <any> 'xs:anyURI',
    Base64Binary = <any> 'xs:base64Binary',
    Boolean = <any> 'xs:boolean',
    Byte = <any> 'xs:byte',
    Date = <any> 'xs:date',
    DateTime = <any> 'xs:dateTime',
    Decimal = <any> 'xs:decimal',
    Double = <any> 'xs:double',
    Duration = <any> 'xs:duration',
    Float = <any> 'xs:float',
    GDay = <any> 'xs:gDay',
    GMonth = <any> 'xs:gMonth',
    GMonthDay = <any> 'xs:gMonthDay',
    GYear = <any> 'xs:gYear',
    GYearMonth = <any> 'xs:gYearMonth',
    HexBinary = <any> 'xs:hexBinary',
    Int = <any> 'xs:int',
    Integer = <any> 'xs:integer',
    Long = <any> 'xs:long',
    NegativeInteger = <any> 'xs:negativeInteger',
    NonNegativeInteger = <any> 'xs:nonNegativeInteger',
    NonPositiveInteger = <any> 'xs:nonPositiveInteger',
    PositiveInteger = <any> 'xs:positiveInteger',
    Short = <any> 'xs:short',
    String = <any> 'xs:string',
    Time = <any> 'xs:time',
    UnsignedByte = <any> 'xs:unsignedByte',
    UnsignedInt = <any> 'xs:unsignedInt',
    UnsignedLong = <any> 'xs:unsignedLong',
    UnsignedShort = <any> 'xs:unsignedShort'
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum DataTypeIec61360 {
    BLOB = <any> 'BLOB',
    BOOLEAN = <any> 'BOOLEAN',
    DATE = <any> 'DATE',
    FILE = <any> 'FILE',
    HTML = <any> 'HTML',
    INTEGERCOUNT = <any> 'INTEGER_COUNT',
    INTEGERCURRENCY = <any> 'INTEGER_CURRENCY',
    INTEGERMEASURE = <any> 'INTEGER_MEASURE',
    IRDI = <any> 'IRDI',
    IRI = <any> 'IRI',
    RATIONAL = <any> 'RATIONAL',
    RATIONALMEASURE = <any> 'RATIONAL_MEASURE',
    REALCOUNT = <any> 'REAL_COUNT',
    REALCURRENCY = <any> 'REAL_CURRENCY',
    REALMEASURE = <any> 'REAL_MEASURE',
    STRING = <any> 'STRING',
    STRINGTRANSLATABLE = <any> 'STRING_TRANSLATABLE',
    TIME = <any> 'TIME',
    TIMESTAMP = <any> 'TIMESTAMP'
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum Direction {
    Input = <any> 'input',
    Output = <any> 'output'
}
/**
 * 
 * @export
 * @interface EmbeddedDataSpecification
 */
export interface EmbeddedDataSpecification {
    /**
     * 
     * @type {DataSpecificationContentChoice}
     * @memberof EmbeddedDataSpecification
     */
    dataSpecificationContent: DataSpecificationContentChoice;
    /**
     * 
     * @type {Reference}
     * @memberof EmbeddedDataSpecification
     */
    dataSpecification: Reference;
}
/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity extends SubmodelElement {
    /**
     * 
     * @type {Array<SubmodelElementChoice>}
     * @memberof Entity
     */
    statements?: Array<SubmodelElementChoice>;
    /**
     * 
     * @type {EntityType}
     * @memberof Entity
     */
    entityType: EntityType;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    globalAssetId?: string;
    /**
     * 
     * @type {Array<SpecificAssetId>}
     * @memberof Entity
     */
    specificAssetIds?: Array<SpecificAssetId>;
    /**
     * 
     * @type {ModelType}
     * @memberof Entity
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface EntityMetadata
 */
export interface EntityMetadata extends SubmodelElementAttributes {
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum EntityType {
    CoManagedEntity = <any> 'CoManagedEntity',
    SelfManagedEntity = <any> 'SelfManagedEntity'
}
/**
 * 
 * @export
 * @interface EntityValue
 */
export interface EntityValue {
    /**
     * 
     * @type {EntityType}
     * @memberof EntityValue
     */
    entityType: EntityType;
    /**
     * 
     * @type {string}
     * @memberof EntityValue
     */
    globalAssetId?: string;
    /**
     * 
     * @type {Array<SpecificAssetIdValue>}
     * @memberof EntityValue
     */
    specificAssetIds?: Array<SpecificAssetIdValue>;
    /**
     * 
     * @type {Array<ValueOnly>}
     * @memberof EntityValue
     */
    statements: Array<ValueOnly>;
}
/**
 * 
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     * 
     * @type {Array<AssetAdministrationShell>}
     * @memberof Environment
     */
    assetAdministrationShells?: Array<AssetAdministrationShell>;
    /**
     * 
     * @type {Array<Submodel>}
     * @memberof Environment
     */
    submodels?: Array<Submodel>;
    /**
     * 
     * @type {Array<ConceptDescription>}
     * @memberof Environment
     */
    conceptDescriptions?: Array<ConceptDescription>;
}
/**
 * 
 * @export
 * @interface EventElement
 */
export interface EventElement extends Referable {
    /**
     * 
     * @type {Reference}
     * @memberof EventElement
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof EventElement
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {Array<Qualifier>}
     * @memberof EventElement
     */
    qualifiers?: Array<Qualifier>;
    /**
     * 
     * @type {ModelType}
     * @memberof EventElement
     */
    modelType: ModelType;
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof EventElement
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ExecutionState {
    Initiated = <any> 'Initiated',
    Running = <any> 'Running',
    Completed = <any> 'Completed',
    Canceled = <any> 'Canceled',
    Failed = <any> 'Failed',
    Timeout = <any> 'Timeout'
}
/**
 * 
 * @export
 * @interface Extension
 */
export interface Extension extends HasSemantics {
    /**
     * 
     * @type {string}
     * @memberof Extension
     */
    name: string;
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof Extension
     */
    valueType?: DataTypeDefXsd;
    /**
     * 
     * @type {string}
     * @memberof Extension
     */
    value?: string;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof Extension
     */
    refersTo?: Array<Reference>;
}
/**
 * 
 * @export
 * @interface FileMetadata
 */
export interface FileMetadata extends SubmodelElementAttributes {
}
/**
 * 
 * @export
 * @interface FileValue
 */
export interface FileValue {
    /**
     * 
     * @type {string}
     * @memberof FileValue
     */
    contentType: string;
    /**
     * 
     * @type {string}
     * @memberof FileValue
     */
    value: string;
}
/**
 * 
 * @export
 * @interface GetAssetAdministrationShellsResult
 */
export interface GetAssetAdministrationShellsResult extends PagedResult {
    /**
     * 
     * @type {Array<AssetAdministrationShell>}
     * @memberof GetAssetAdministrationShellsResult
     */
    result?: Array<AssetAdministrationShell>;
}
/**
 * 
 * @export
 * @interface GetPathItemsResult
 */
export interface GetPathItemsResult extends PagedResult {
    /**
     * 
     * @type {Array<PathItem>}
     * @memberof GetPathItemsResult
     */
    result?: Array<PathItem>;
}
/**
 * 
 * @export
 * @interface GetReferencesResult
 */
export interface GetReferencesResult extends PagedResult {
    /**
     * 
     * @type {Array<Reference>}
     * @memberof GetReferencesResult
     */
    result?: Array<Reference>;
}
/**
 * 
 * @export
 * @interface GetSubmodelElementsMetadataResult
 */
export interface GetSubmodelElementsMetadataResult extends PagedResult {
    /**
     * 
     * @type {Array<SubmodelElementMetadata>}
     * @memberof GetSubmodelElementsMetadataResult
     */
    result?: Array<SubmodelElementMetadata>;
}
/**
 * 
 * @export
 * @interface GetSubmodelElementsResult
 */
export interface GetSubmodelElementsResult extends PagedResult {
    /**
     * 
     * @type {Array<SubmodelElement>}
     * @memberof GetSubmodelElementsResult
     */
    result?: Array<SubmodelElement>;
}
/**
 * 
 * @export
 * @interface GetSubmodelElementsValueResult
 */
export interface GetSubmodelElementsValueResult extends PagedResult {
    /**
     * 
     * @type {Array<SubmodelElementValue>}
     * @memberof GetSubmodelElementsValueResult
     */
    result?: Array<SubmodelElementValue>;
}
/**
 * 
 * @export
 * @interface HasDataSpecification
 */
export interface HasDataSpecification {
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof HasDataSpecification
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
}
/**
 * 
 * @export
 * @interface HasExtensions
 */
export interface HasExtensions {
    /**
     * 
     * @type {Array<Extension>}
     * @memberof HasExtensions
     */
    extensions?: Array<Extension>;
}
/**
 * 
 * @export
 * @interface HasKind
 */
export interface HasKind {
    /**
     * 
     * @type {ModellingKind}
     * @memberof HasKind
     */
    kind?: ModellingKind;
}
/**
 * 
 * @export
 * @interface HasKind1
 */
export interface HasKind1 {
    /**
     * 
     * @type {ModellingKind}
     * @memberof HasKind1
     */
    kind?: ModellingKind;
}
/**
 * 
 * @export
 * @interface HasSemantics
 */
export interface HasSemantics {
    /**
     * 
     * @type {Reference}
     * @memberof HasSemantics
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof HasSemantics
     */
    supplementalSemanticIds?: Array<Reference>;
}
/**
 * 
 * @export
 * @interface HasSemantics1
 */
export interface HasSemantics1 {
    /**
     * 
     * @type {Reference}
     * @memberof HasSemantics1
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof HasSemantics1
     */
    supplementalSemanticIds?: Array<Reference>;
}
/**
 * 
 * @export
 * @interface IdShortPathAttachmentBody
 */
export interface IdShortPathAttachmentBody {
    /**
     * 
     * @type {string}
     * @memberof IdShortPathAttachmentBody
     */
    fileName?: string;
    /**
     * 
     * @type {Blob}
     * @memberof IdShortPathAttachmentBody
     */
    file?: Blob;
}
/**
 * 
 * @export
 * @interface Identifiable
 */
export interface Identifiable extends Referable {
    /**
     * 
     * @type {AdministrativeInformation}
     * @memberof Identifiable
     */
    administration?: AdministrativeInformation;
    /**
     * 
     * @type {string}
     * @memberof Identifiable
     */
    id: string;
}
/**
 * 
 * @export
 * @interface Key
 */
export interface Key {
    /**
     * 
     * @type {KeyTypes}
     * @memberof Key
     */
    type: KeyTypes;
    /**
     * 
     * @type {string}
     * @memberof Key
     */
    value: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum KeyTypes {
    AnnotatedRelationshipElement = <any> 'AnnotatedRelationshipElement',
    AssetAdministrationShell = <any> 'AssetAdministrationShell',
    BasicEventElement = <any> 'BasicEventElement',
    Blob = <any> 'Blob',
    Capability = <any> 'Capability',
    ConceptDescription = <any> 'ConceptDescription',
    DataElement = <any> 'DataElement',
    Entity = <any> 'Entity',
    EventElement = <any> 'EventElement',
    File = <any> 'File',
    FragmentReference = <any> 'FragmentReference',
    GlobalReference = <any> 'GlobalReference',
    Identifiable = <any> 'Identifiable',
    MultiLanguageProperty = <any> 'MultiLanguageProperty',
    Operation = <any> 'Operation',
    Property = <any> 'Property',
    Range = <any> 'Range',
    Referable = <any> 'Referable',
    ReferenceElement = <any> 'ReferenceElement',
    RelationshipElement = <any> 'RelationshipElement',
    Submodel = <any> 'Submodel',
    SubmodelElement = <any> 'SubmodelElement',
    SubmodelElementCollection = <any> 'SubmodelElementCollection',
    SubmodelElementList = <any> 'SubmodelElementList'
}
/**
 * 
 * @export
 * @interface LangStringDefinitionTypeIec61360
 */
export interface LangStringDefinitionTypeIec61360 extends AbstractLangString {
    /**
     * 
     * @type {any}
     * @memberof LangStringDefinitionTypeIec61360
     */
    text: any;
}
/**
 * 
 * @export
 * @interface LangStringNameType
 */
export interface LangStringNameType extends AbstractLangString {
    /**
     * 
     * @type {any}
     * @memberof LangStringNameType
     */
    text: any;
}
/**
 * 
 * @export
 * @interface LangStringPreferredNameTypeIec61360
 */
export interface LangStringPreferredNameTypeIec61360 extends AbstractLangString {
    /**
     * 
     * @type {any}
     * @memberof LangStringPreferredNameTypeIec61360
     */
    text: any;
}
/**
 * 
 * @export
 * @interface LangStringShortNameTypeIec61360
 */
export interface LangStringShortNameTypeIec61360 extends AbstractLangString {
    /**
     * 
     * @type {any}
     * @memberof LangStringShortNameTypeIec61360
     */
    text: any;
}
/**
 * 
 * @export
 * @interface LangStringTextType
 */
export interface LangStringTextType extends AbstractLangString {
    /**
     * 
     * @type {any}
     * @memberof LangStringTextType
     */
    text: any;
}
/**
 * 
 * @export
 * @interface LevelType
 */
export interface LevelType {
    /**
     * 
     * @type {boolean}
     * @memberof LevelType
     */
    min: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LevelType
     */
    nom: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LevelType
     */
    typ: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LevelType
     */
    max: boolean;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    correlationId?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    messageType?: Message.MessageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    timestamp?: string;
}

/**
 * @export
 * @namespace Message
 */
export namespace Message {
    /**
     * @export
     * @enum {string}
     */
    export enum MessageTypeEnum {
        Undefined = <any> 'Undefined',
        Info = <any> 'Info',
        Warning = <any> 'Warning',
        Error = <any> 'Error',
        Exception = <any> 'Exception'
    }
}
/**
 * 
 * @export
 * @interface ModelFile
 */
export interface ModelFile extends DataElement {
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    value?: string;
    /**
     * 
     * @type {any}
     * @memberof ModelFile
     */
    contentType: any;
    /**
     * 
     * @type {ModelType}
     * @memberof ModelFile
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ModelType {
    AnnotatedRelationshipElement = <any> 'AnnotatedRelationshipElement',
    AssetAdministrationShell = <any> 'AssetAdministrationShell',
    BasicEventElement = <any> 'BasicEventElement',
    Blob = <any> 'Blob',
    Capability = <any> 'Capability',
    ConceptDescription = <any> 'ConceptDescription',
    DataSpecificationIec61360 = <any> 'DataSpecificationIec61360',
    Entity = <any> 'Entity',
    File = <any> 'File',
    MultiLanguageProperty = <any> 'MultiLanguageProperty',
    Operation = <any> 'Operation',
    Property = <any> 'Property',
    Range = <any> 'Range',
    ReferenceElement = <any> 'ReferenceElement',
    RelationshipElement = <any> 'RelationshipElement',
    Submodel = <any> 'Submodel',
    SubmodelElementCollection = <any> 'SubmodelElementCollection',
    SubmodelElementList = <any> 'SubmodelElementList'
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ModellingKind {
    Instance = <any> 'Instance',
    Template = <any> 'Template'
}
/**
 * 
 * @export
 * @interface MultiLanguageProperty
 */
export interface MultiLanguageProperty extends DataElement {
    /**
     * 
     * @type {Array<LangStringTextType>}
     * @memberof MultiLanguageProperty
     */
    value?: Array<LangStringTextType>;
    /**
     * 
     * @type {Reference}
     * @memberof MultiLanguageProperty
     */
    valueId?: Reference;
    /**
     * 
     * @type {ModelType}
     * @memberof MultiLanguageProperty
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface MultiLanguagePropertyMetadata
 */
export interface MultiLanguagePropertyMetadata extends SubmodelElementAttributes {
}
/**
 * Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.
 * @export
 * @interface MultiLanguagePropertyValue
 */
export interface MultiLanguagePropertyValue {
}
/**
 * 
 * @export
 */
export type NumberValue = number
/**
 * 
 * @export
 * @interface Operation
 */
export interface Operation extends SubmodelElement {
    /**
     * 
     * @type {Array<OperationVariable>}
     * @memberof Operation
     */
    inputVariables?: Array<OperationVariable>;
    /**
     * 
     * @type {Array<OperationVariable>}
     * @memberof Operation
     */
    outputVariables?: Array<OperationVariable>;
    /**
     * 
     * @type {Array<OperationVariable>}
     * @memberof Operation
     */
    inoutputVariables?: Array<OperationVariable>;
    /**
     * 
     * @type {ModelType}
     * @memberof Operation
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface OperationMetadata
 */
export interface OperationMetadata extends SubmodelElementAttributes {
}
/**
 * 
 * @export
 * @interface OperationRequest
 */
export interface OperationRequest {
    /**
     * 
     * @type {Array<OperationVariable>}
     * @memberof OperationRequest
     */
    inoutputArguments?: Array<OperationVariable>;
    /**
     * 
     * @type {Array<OperationVariable>}
     * @memberof OperationRequest
     */
    inputArguments?: Array<OperationVariable>;
    /**
     * 
     * @type {string}
     * @memberof OperationRequest
     */
    clientTimeoutDuration?: string;
}
/**
 * 
 * @export
 * @interface OperationRequestValueOnly
 */
export interface OperationRequestValueOnly {
    /**
     * 
     * @type {ValueOnly}
     * @memberof OperationRequestValueOnly
     */
    inoutputArguments?: ValueOnly;
    /**
     * 
     * @type {ValueOnly}
     * @memberof OperationRequestValueOnly
     */
    inputArguments?: ValueOnly;
    /**
     * 
     * @type {string}
     * @memberof OperationRequestValueOnly
     */
    clientTimeoutDuration: string;
}
/**
 * 
 * @export
 * @interface OperationResult
 */
export interface OperationResult extends BaseOperationResult {
    /**
     * 
     * @type {Array<OperationVariable>}
     * @memberof OperationResult
     */
    inoutputArguments?: Array<OperationVariable>;
    /**
     * 
     * @type {Array<OperationVariable>}
     * @memberof OperationResult
     */
    outputArguments?: Array<OperationVariable>;
}
/**
 * 
 * @export
 * @interface OperationResultValueOnly
 */
export interface OperationResultValueOnly extends BaseOperationResult {
    /**
     * 
     * @type {ValueOnly}
     * @memberof OperationResultValueOnly
     */
    inoutputArguments?: ValueOnly;
    /**
     * 
     * @type {ValueOnly}
     * @memberof OperationResultValueOnly
     */
    outputArguments?: ValueOnly;
}
/**
 * 
 * @export
 * @interface OperationVariable
 */
export interface OperationVariable {
    /**
     * 
     * @type {SubmodelElementChoice}
     * @memberof OperationVariable
     */
    value: SubmodelElementChoice;
}
/**
 * 
 * @export
 * @interface PagedResult
 */
export interface PagedResult {
    /**
     * 
     * @type {PagedResultPagingMetadata}
     * @memberof PagedResult
     */
    pagingMetadata?: PagedResultPagingMetadata;
}
/**
 * 
 * @export
 * @interface PagedResultPagingMetadata
 */
export interface PagedResultPagingMetadata {
    /**
     * 
     * @type {string}
     * @memberof PagedResultPagingMetadata
     */
    cursor?: string;
}
/**
 * 
 * @export
 */
export type PathItem = string
/**
 * 
 * @export
 * @interface Property
 */
export interface Property extends DataElement {
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof Property
     */
    valueType: DataTypeDefXsd;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    value?: string;
    /**
     * 
     * @type {Reference}
     * @memberof Property
     */
    valueId?: Reference;
    /**
     * 
     * @type {ModelType}
     * @memberof Property
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface PropertyMetadata
 */
export interface PropertyMetadata extends SubmodelElementAttributes {
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof PropertyMetadata
     */
    valueType?: DataTypeDefXsd;
}
/**
 * 
 * @export
 * @interface PropertyValue
 */
export interface PropertyValue {
}
/**
 * 
 * @export
 * @interface Qualifiable
 */
export interface Qualifiable {
    /**
     * 
     * @type {Array<Qualifier>}
     * @memberof Qualifiable
     */
    qualifiers?: Array<Qualifier>;
    /**
     * 
     * @type {ModelType}
     * @memberof Qualifiable
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface Qualifiable1
 */
export interface Qualifiable1 {
    /**
     * 
     * @type {Array<Qualifier1>}
     * @memberof Qualifiable1
     */
    qualifiers?: Array<Qualifier1>;
    /**
     * 
     * @type {ModelType}
     * @memberof Qualifiable1
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface Qualifier
 */
export interface Qualifier extends HasSemantics {
    /**
     * 
     * @type {QualifierKind}
     * @memberof Qualifier
     */
    kind?: QualifierKind;
    /**
     * 
     * @type {string}
     * @memberof Qualifier
     */
    type: string;
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof Qualifier
     */
    valueType: DataTypeDefXsd;
    /**
     * 
     * @type {string}
     * @memberof Qualifier
     */
    value?: string;
    /**
     * 
     * @type {Reference}
     * @memberof Qualifier
     */
    valueId?: Reference;
}
/**
 * 
 * @export
 * @interface Qualifier1
 */
export interface Qualifier1 extends HasSemantics1 {
    /**
     * 
     * @type {QualifierKind}
     * @memberof Qualifier1
     */
    kind?: QualifierKind;
    /**
     * 
     * @type {string}
     * @memberof Qualifier1
     */
    type: string;
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof Qualifier1
     */
    valueType: DataTypeDefXsd;
    /**
     * 
     * @type {string}
     * @memberof Qualifier1
     */
    value?: string;
    /**
     * 
     * @type {Reference}
     * @memberof Qualifier1
     */
    valueId?: Reference;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum QualifierKind {
    ConceptQualifier = <any> 'ConceptQualifier',
    TemplateQualifier = <any> 'TemplateQualifier',
    ValueQualifier = <any> 'ValueQualifier'
}
/**
 * 
 * @export
 * @interface Range
 */
export interface Range extends DataElement {
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof Range
     */
    valueType: DataTypeDefXsd;
    /**
     * 
     * @type {string}
     * @memberof Range
     */
    min?: string;
    /**
     * 
     * @type {string}
     * @memberof Range
     */
    max?: string;
    /**
     * 
     * @type {ModelType}
     * @memberof Range
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface RangeMetadata
 */
export interface RangeMetadata extends SubmodelElementAttributes {
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof RangeMetadata
     */
    valueType?: DataTypeDefXsd;
}
/**
 * 
 * @export
 * @interface RangeValue
 */
export interface RangeValue {
    /**
     * 
     * @type {RangeValueType}
     * @memberof RangeValue
     */
    max?: RangeValueType;
    /**
     * 
     * @type {RangeValueType}
     * @memberof RangeValue
     */
    min?: RangeValueType;
}
/**
 * 
 * @export
 * @interface RangeValueType
 */
export interface RangeValueType {
}
/**
 * 
 * @export
 * @interface Referable
 */
export interface Referable extends HasExtensions {
    /**
     * 
     * @type {string}
     * @memberof Referable
     */
    category?: string;
    /**
     * 
     * @type {any}
     * @memberof Referable
     */
    idShort?: any;
    /**
     * 
     * @type {Array<LangStringNameType>}
     * @memberof Referable
     */
    displayName?: Array<LangStringNameType>;
    /**
     * 
     * @type {Array<LangStringTextType>}
     * @memberof Referable
     */
    description?: Array<LangStringTextType>;
    /**
     * 
     * @type {ModelType}
     * @memberof Referable
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface Referable1
 */
export interface Referable1 extends HasExtensions {
    /**
     * 
     * @type {string}
     * @memberof Referable1
     */
    category?: string;
    /**
     * 
     * @type {any}
     * @memberof Referable1
     */
    idShort?: any;
    /**
     * 
     * @type {Array<LangStringNameType>}
     * @memberof Referable1
     */
    displayName?: Array<LangStringNameType>;
    /**
     * 
     * @type {Array<LangStringTextType>}
     * @memberof Referable1
     */
    description?: Array<LangStringTextType>;
    /**
     * 
     * @type {ModelType}
     * @memberof Referable1
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface Reference
 */
export interface Reference extends ReferenceParent {
    /**
     * 
     * @type {ReferenceParent}
     * @memberof Reference
     */
    referredSemanticId?: ReferenceParent;
}
/**
 * 
 * @export
 * @interface ReferenceElement
 */
export interface ReferenceElement extends DataElement {
    /**
     * 
     * @type {Reference}
     * @memberof ReferenceElement
     */
    value?: Reference;
    /**
     * 
     * @type {ModelType}
     * @memberof ReferenceElement
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface ReferenceElementMetadata
 */
export interface ReferenceElementMetadata extends SubmodelElementAttributes {
}
/**
 * 
 * @export
 * @interface ReferenceElementValue
 */
export interface ReferenceElementValue {
    /**
     * 
     * @type {ReferenceTypes}
     * @memberof ReferenceElementValue
     */
    type?: ReferenceTypes;
    /**
     * 
     * @type {Array<Key>}
     * @memberof ReferenceElementValue
     */
    keys?: Array<Key>;
}
/**
 * 
 * @export
 * @interface ReferenceParent
 */
export interface ReferenceParent {
    /**
     * 
     * @type {ReferenceTypes}
     * @memberof ReferenceParent
     */
    type: ReferenceTypes;
    /**
     * 
     * @type {Array<Key>}
     * @memberof ReferenceParent
     */
    keys: Array<Key>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ReferenceTypes {
    ExternalReference = <any> 'ExternalReference',
    ModelReference = <any> 'ModelReference'
}
/**
 * 
 * @export
 * @interface ReferenceValue
 */
export interface ReferenceValue {
    /**
     * 
     * @type {ReferenceTypes}
     * @memberof ReferenceValue
     */
    type?: ReferenceTypes;
    /**
     * 
     * @type {Array<Key>}
     * @memberof ReferenceValue
     */
    keys?: Array<Key>;
}
/**
 * 
 * @export
 * @interface RelationshipElement
 */
export interface RelationshipElement extends RelationshipElementAbstract {
    /**
     * 
     * @type {ModelType}
     * @memberof RelationshipElement
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface RelationshipElementAbstract
 */
export interface RelationshipElementAbstract extends SubmodelElement {
    /**
     * 
     * @type {Reference}
     * @memberof RelationshipElementAbstract
     */
    first: Reference;
    /**
     * 
     * @type {Reference}
     * @memberof RelationshipElementAbstract
     */
    second: Reference;
}
/**
 * 
 * @export
 * @interface RelationshipElementMetadata
 */
export interface RelationshipElementMetadata extends SubmodelElementAttributes {
}
/**
 * 
 * @export
 * @interface RelationshipElementValue
 */
export interface RelationshipElementValue {
    /**
     * 
     * @type {ReferenceValue}
     * @memberof RelationshipElementValue
     */
    first: ReferenceValue;
    /**
     * 
     * @type {ReferenceValue}
     * @memberof RelationshipElementValue
     */
    second: ReferenceValue;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    path: string;
    /**
     * 
     * @type {any}
     * @memberof Resource
     */
    contentType?: any;
}
/**
 * 
 * @export
 * @interface Result
 */
export interface Result {
    /**
     * 
     * @type {Array<Message>}
     * @memberof Result
     */
    messages?: Array<Message>;
}
/**
 * The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
 * @export
 * @interface ServiceDescription
 */
export interface ServiceDescription {
    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceDescription
     */
    profiles?: Array<string>;
}
/**
 * 
 * @export
 * @interface SpecificAssetId
 */
export interface SpecificAssetId extends HasSemantics {
    /**
     * 
     * @type {string}
     * @memberof SpecificAssetId
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SpecificAssetId
     */
    value: string;
    /**
     * 
     * @type {Reference}
     * @memberof SpecificAssetId
     */
    externalSubjectId?: Reference;
}
/**
 * Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.
 * @export
 * @interface SpecificAssetIdValue
 */
export interface SpecificAssetIdValue {
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum StateOfEvent {
    Off = <any> 'off',
    On = <any> 'on'
}
/**
 * 
 * @export
 */
export type StringValue = string
/**
 * 
 * @export
 * @interface Submodel
 */
export interface Submodel extends Identifiable {
    /**
     * 
     * @type {ModellingKind}
     * @memberof Submodel
     */
    kind?: ModellingKind;
    /**
     * 
     * @type {Reference}
     * @memberof Submodel
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof Submodel
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {Array<Qualifier>}
     * @memberof Submodel
     */
    qualifiers?: Array<Qualifier>;
    /**
     * 
     * @type {ModelType}
     * @memberof Submodel
     */
    modelType: ModelType;
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof Submodel
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
    /**
     * 
     * @type {Array<SubmodelElementChoice>}
     * @memberof Submodel
     */
    submodelElements?: Array<SubmodelElementChoice>;
}
/**
 * 
 * @export
 * @interface SubmodelElement
 */
export interface SubmodelElement extends Referable {
    /**
     * 
     * @type {Reference}
     * @memberof SubmodelElement
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof SubmodelElement
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {Array<Qualifier>}
     * @memberof SubmodelElement
     */
    qualifiers?: Array<Qualifier>;
    /**
     * 
     * @type {ModelType}
     * @memberof SubmodelElement
     */
    modelType: ModelType;
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof SubmodelElement
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
}
/**
 * 
 * @export
 * @interface SubmodelElementAttributes
 */
export interface SubmodelElementAttributes extends Referable1 {
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof SubmodelElementAttributes
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
    /**
     * 
     * @type {Reference}
     * @memberof SubmodelElementAttributes
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof SubmodelElementAttributes
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {Array<Qualifier1>}
     * @memberof SubmodelElementAttributes
     */
    qualifiers?: Array<Qualifier1>;
    /**
     * 
     * @type {ModelType}
     * @memberof SubmodelElementAttributes
     */
    modelType: ModelType;
    /**
     * 
     * @type {ModellingKind}
     * @memberof SubmodelElementAttributes
     */
    kind?: ModellingKind;
}
/**
 * 
 * @export
 * @interface SubmodelElementChoice
 */
export interface SubmodelElementChoice {
}
/**
 * 
 * @export
 * @interface SubmodelElementCollection
 */
export interface SubmodelElementCollection extends SubmodelElement {
    /**
     * 
     * @type {Array<SubmodelElementChoice>}
     * @memberof SubmodelElementCollection
     */
    value?: Array<SubmodelElementChoice>;
    /**
     * 
     * @type {ModelType}
     * @memberof SubmodelElementCollection
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface SubmodelElementCollectionMetadata
 */
export interface SubmodelElementCollectionMetadata extends SubmodelElementAttributes {
}
/**
 * Since patternProperties and propertyNames are not supported by OpenApi yet, the ValueOnly serialization for this elements works with the key-attribute as the JSON-property name and the value-attribute as the corresponding value.
 * @export
 * @interface SubmodelElementCollectionValue
 */
export interface SubmodelElementCollectionValue {
}
/**
 * 
 * @export
 * @interface SubmodelElementList
 */
export interface SubmodelElementList extends SubmodelElement {
    /**
     * 
     * @type {boolean}
     * @memberof SubmodelElementList
     */
    orderRelevant?: boolean;
    /**
     * 
     * @type {Reference}
     * @memberof SubmodelElementList
     */
    semanticIdListElement?: Reference;
    /**
     * 
     * @type {AasSubmodelElements}
     * @memberof SubmodelElementList
     */
    typeValueListElement: AasSubmodelElements;
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof SubmodelElementList
     */
    valueTypeListElement?: DataTypeDefXsd;
    /**
     * 
     * @type {Array<SubmodelElementChoice>}
     * @memberof SubmodelElementList
     */
    value?: Array<SubmodelElementChoice>;
    /**
     * 
     * @type {ModelType}
     * @memberof SubmodelElementList
     */
    modelType: ModelType;
}
/**
 * 
 * @export
 * @interface SubmodelElementListMetadata
 */
export interface SubmodelElementListMetadata extends SubmodelElementAttributes {
    /**
     * 
     * @type {boolean}
     * @memberof SubmodelElementListMetadata
     */
    orderRelevant?: boolean;
    /**
     * 
     * @type {Reference}
     * @memberof SubmodelElementListMetadata
     */
    semanticIdListElement?: Reference;
    /**
     * 
     * @type {ModelType}
     * @memberof SubmodelElementListMetadata
     */
    typeValueListElement?: ModelType;
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof SubmodelElementListMetadata
     */
    valueTypeListElement?: DataTypeDefXsd;
}
/**
 * 
 * @export
 */
export type SubmodelElementListValue = Array<SubmodelElementValue>
/**
 * 
 * @export
 * @interface SubmodelElementMetadata
 */
export interface SubmodelElementMetadata {
}
/**
 * 
 * @export
 * @interface SubmodelElementValue
 */
export interface SubmodelElementValue {
}
/**
 * 
 * @export
 * @interface SubmodelMetadata
 */
export interface SubmodelMetadata extends Identifiable {
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof SubmodelMetadata
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
    /**
     * 
     * @type {Array<Qualifier>}
     * @memberof SubmodelMetadata
     */
    qualifiers?: Array<Qualifier>;
    /**
     * 
     * @type {ModelType}
     * @memberof SubmodelMetadata
     */
    modelType: ModelType;
    /**
     * 
     * @type {Reference}
     * @memberof SubmodelMetadata
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof SubmodelMetadata
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {ModellingKind}
     * @memberof SubmodelMetadata
     */
    kind?: ModellingKind;
}
/**
 * The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.
 * @export
 * @interface SubmodelValue
 */
export interface SubmodelValue {
}
/**
 * 
 * @export
 * @interface ValueList
 */
export interface ValueList {
    /**
     * 
     * @type {Array<ValueReferencePair>}
     * @memberof ValueList
     */
    valueReferencePairs: Array<ValueReferencePair>;
}
/**
 * The ValueOnly serialization (patternProperties and propertyNames will be supported probably with OpenApi 3.1). For the full description of the generic JSON validation schema see the ValueOnly-Serialization as defined in the 'Specification of the Asset Administration Shell - Part 2'.
 * @export
 * @interface ValueOnly
 */
export interface ValueOnly {
}
/**
 * 
 * @export
 * @interface ValueReferencePair
 */
export interface ValueReferencePair {
    /**
     * 
     * @type {string}
     * @memberof ValueReferencePair
     */
    value: string;
    /**
     * 
     * @type {Reference}
     * @memberof ValueReferencePair
     */
    valueId: Reference;
}
/**
 * AssetAdministrationShellRepositoryAPIApi - fetch parameter creator
 * @export
 */
export const AssetAdministrationShellRepositoryAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an Asset Administration Shell
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssetAdministrationShellById(aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling deleteAssetAdministrationShellById.');
            }
            const localVarPath = `/shells/{aasIdentifier}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling deleteFileByPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling deleteFileByPathAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling deleteFileByPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the submodel from the Asset Administration Shell and the Repository.
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubmodelByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling deleteSubmodelByIdAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling deleteSubmodelByIdAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a submodel element at a specified path within the submodel elements hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubmodelElementByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling deleteSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling deleteSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling deleteSubmodelElementByPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubmodelReferenceByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling deleteSubmodelReferenceByIdAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling deleteSubmodelReferenceByIdAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodel-refs/{submodelIdentifier}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnailAasRepository(aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling deleteThumbnailAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/asset-information/thumbnail`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all Asset Administration Shells
         * @param {Array<string>} [assetIds] A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         * @param {string} [idShort] The Asset Administration Shell’s IdShort
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssetAdministrationShells(assetIds?: Array<string>, idShort?: string, limit?: number, cursor?: string, options: any = {}): FetchArgs {
            const localVarPath = `/shells`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetIds) {
                localVarQueryParameter['assetIds'] = assetIds;
            }

            if (idShort !== undefined) {
                localVarQueryParameter['idShort'] = idShort;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns References to all Asset Administration Shells
         * @param {Array<string>} [assetIds] A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         * @param {string} [idShort] The Asset Administration Shell’s IdShort
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssetAdministrationShellsReference(assetIds?: Array<string>, idShort?: string, limit?: number, cursor?: string, options: any = {}): FetchArgs {
            const localVarPath = `/shells/$reference`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetIds) {
                localVarQueryParameter['assetIds'] = assetIds;
            }

            if (idShort !== undefined) {
                localVarQueryParameter['idShort'] = idShort;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, extent?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getAllSubmodelElementsAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getAllSubmodelElementsAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (extent !== undefined) {
                localVarQueryParameter['extent'] = extent;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getAllSubmodelElementsMetadataAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getAllSubmodelElementsMetadataAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$metadata`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsPathAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, extent?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getAllSubmodelElementsPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getAllSubmodelElementsPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$path`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (extent !== undefined) {
                localVarQueryParameter['extent'] = extent;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all submodel elements as a list of References
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getAllSubmodelElementsReferenceAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getAllSubmodelElementsReferenceAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$reference`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy in the ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getAllSubmodelElementsValueOnlyAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getAllSubmodelElementsValueOnlyAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/$value`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all submodel references
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelReferencesAasRepository(aasIdentifier: string, limit?: number, cursor?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getAllSubmodelReferencesAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodel-refs`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a specific Asset Administration Shell
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAdministrationShellById(aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getAssetAdministrationShellById.');
            }
            const localVarPath = `/shells/{aasIdentifier}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a specific Asset Administration Shell as a Reference
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAdministrationShellByIdReferenceAasRepository(aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getAssetAdministrationShellByIdReferenceAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/$reference`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Asset Information
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInformationAasRepository(aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getAssetInformationAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/asset-information`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Downloads file content from a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getFileByPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getFileByPathAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling getFileByPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Operation result of an asynchronous invoked Operation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationAsyncResultAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getOperationAsyncResultAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getOperationAsyncResultAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling getOperationAsyncResultAasRepository.');
            }
            // verify required parameter 'handleId' is not null or undefined
            if (handleId === null || handleId === undefined) {
                throw new RequiredError('handleId','Required parameter handleId was null or undefined when calling getOperationAsyncResultAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)))
                .replace(`{${"handleId"}}`, encodeURIComponent(String(handleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationAsyncResultValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getOperationAsyncResultValueOnlyAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getOperationAsyncResultValueOnlyAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling getOperationAsyncResultValueOnlyAasRepository.');
            }
            // verify required parameter 'handleId' is not null or undefined
            if (handleId === null || handleId === undefined) {
                throw new RequiredError('handleId','Required parameter handleId was null or undefined when calling getOperationAsyncResultValueOnlyAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)))
                .replace(`{${"handleId"}}`, encodeURIComponent(String(handleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Operation status of an asynchronous invoked Operation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationAsyncStatusAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getOperationAsyncStatusAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getOperationAsyncStatusAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling getOperationAsyncStatusAasRepository.');
            }
            // verify required parameter 'handleId' is not null or undefined
            if (handleId === null || handleId === undefined) {
                throw new RequiredError('handleId','Required parameter handleId was null or undefined when calling getOperationAsyncStatusAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)))
                .replace(`{${"handleId"}}`, encodeURIComponent(String(handleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Submodel
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, extent?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelByIdAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelByIdAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (extent !== undefined) {
                localVarQueryParameter['extent'] = extent;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Submodel's metadata elements
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelByIdMetadataAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelByIdMetadataAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Submodel's metadata elements
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdPathAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelByIdPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelByIdPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$path`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Submodel as a Reference
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelByIdReferenceAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelByIdReferenceAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$reference`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Submodel's ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, extent?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelByIdValueOnlyAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelByIdValueOnlyAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (extent !== undefined) {
                localVarQueryParameter['extent'] = extent;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, extent?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling getSubmodelElementByPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (extent !== undefined) {
                localVarQueryParameter['extent'] = extent;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelElementByPathMetadataAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelElementByPathMetadataAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling getSubmodelElementByPathMetadataAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a specific submodel element from the Submodel at a specified path in the Path notation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelElementByPathPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelElementByPathPathAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling getSubmodelElementByPathPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Reference of a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelElementByPathReferenceAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelElementByPathReferenceAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling getSubmodelElementByPathReferenceAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, extent?: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getSubmodelElementByPathValueOnlyAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling getSubmodelElementByPathValueOnlyAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling getSubmodelElementByPathValueOnlyAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (extent !== undefined) {
                localVarQueryParameter['extent'] = extent;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailAasRepository(aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling getThumbnailAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/asset-information/thumbnail`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Synchronously invokes an Operation at a specified path
         * @param {OperationRequest} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationAasRepository(body: OperationRequest, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling invokeOperationAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling invokeOperationAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling invokeOperationAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling invokeOperationAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OperationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Asynchronously invokes an Operation at a specified path
         * @param {OperationRequest} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationAsyncAasRepository(body: OperationRequest, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling invokeOperationAsyncAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling invokeOperationAsyncAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling invokeOperationAsyncAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling invokeOperationAsyncAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OperationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Asynchronously invokes an Operation at a specified path
         * @param {OperationRequestValueOnly} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationAsyncValueOnlyAasRepository(body: OperationRequestValueOnly, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling invokeOperationAsyncValueOnlyAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling invokeOperationAsyncValueOnlyAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling invokeOperationAsyncValueOnlyAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling invokeOperationAsyncValueOnlyAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OperationRequestValueOnly" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Synchronously invokes an Operation at a specified path
         * @param {OperationRequestValueOnly} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationValueOnlyAasRepository(body: OperationRequestValueOnly, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling invokeOperationValueOnlyAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling invokeOperationValueOnlyAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling invokeOperationValueOnlyAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling invokeOperationValueOnlyAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OperationRequestValueOnly" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the Submodel
         * @param {Submodel} body Submodel object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelAasRepository(body: Submodel, aasIdentifier: string, submodelIdentifier: string, level?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchSubmodelAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling patchSubmodelAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling patchSubmodelAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Submodel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the metadata attributes of the Submodel
         * @param {SubmodelMetadata} body Submodel object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelByIdMetadataAasRepository(body: SubmodelMetadata, aasIdentifier: string, submodelIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchSubmodelByIdMetadataAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling patchSubmodelByIdMetadataAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling patchSubmodelByIdMetadataAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$metadata`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmodelMetadata" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the values of the Submodel
         * @param {SubmodelValue} body Submodel object in the ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelByIdValueOnlyAasRepository(body: SubmodelValue, aasIdentifier: string, submodelIdentifier: string, level?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchSubmodelByIdValueOnlyAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling patchSubmodelByIdValueOnlyAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling patchSubmodelByIdValueOnlyAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/$value`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmodelValue" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing submodel element value at a specified path within submodel elements hierarchy
         * @param {SubmodelElement} body The updated value of the submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelElementValueByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchSubmodelElementValueByPathAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling patchSubmodelElementValueByPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling patchSubmodelElementValueByPathAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling patchSubmodelElementValueByPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmodelElement" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
         * @param {SubmodelElementMetadata} body The updated metadata attributes of the submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelElementValueByPathMetadata(body: SubmodelElementMetadata, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchSubmodelElementValueByPathMetadata.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling patchSubmodelElementValueByPathMetadata.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling patchSubmodelElementValueByPathMetadata.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling patchSubmodelElementValueByPathMetadata.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmodelElementMetadata" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
         * @param {SubmodelElementValue} body The updated value of the submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelElementValueByPathValueOnly(body: SubmodelElementValue, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchSubmodelElementValueByPathValueOnly.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling patchSubmodelElementValueByPathValueOnly.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling patchSubmodelElementValueByPathValueOnly.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling patchSubmodelElementValueByPathValueOnly.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmodelElementValue" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new Asset Administration Shell
         * @param {AssetAdministrationShell} body Asset Administration Shell object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetAdministrationShell(body: AssetAdministrationShell, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postAssetAdministrationShell.');
            }
            const localVarPath = `/shells`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AssetAdministrationShell" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new submodel element
         * @param {SubmodelElement} body Requested submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmodelElementAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postSubmodelElementAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling postSubmodelElementAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling postSubmodelElementAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmodelElement" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new submodel element at a specified path within submodel elements hierarchy
         * @param {SubmodelElement} body Requested submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmodelElementByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling postSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling postSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling postSubmodelElementByPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmodelElement" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a submodel reference at the Asset Administration Shell
         * @param {Reference} body Reference to the Submodel
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmodelReferenceAasRepository(body: Reference, aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postSubmodelReferenceAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling postSubmodelReferenceAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodel-refs`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Reference" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing Asset Administration Shell
         * @param {AssetAdministrationShell} body Asset Administration Shell object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAssetAdministrationShellById(body: AssetAdministrationShell, aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putAssetAdministrationShellById.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling putAssetAdministrationShellById.');
            }
            const localVarPath = `/shells/{aasIdentifier}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AssetAdministrationShell" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the Asset Information
         * @param {AssetInformation} body Asset Information object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAssetInformationAasRepository(body: AssetInformation, aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putAssetInformationAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling putAssetInformationAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/asset-information`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AssetInformation" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
         * @param {string} fileName 
         * @param {Blob} file 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFileByPathAasRepository(fileName: string, file: Blob, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new RequiredError('fileName','Required parameter fileName was null or undefined when calling putFileByPathAasRepository.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling putFileByPathAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling putFileByPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling putFileByPathAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling putFileByPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            if (fileName !== undefined) {
                localVarFormParams.set('fileName', fileName as any);
            }

            if (file !== undefined) {
                localVarFormParams.set('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the Submodel
         * @param {Submodel} body Submodel object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubmodelByIdAasRepository(body: Submodel, aasIdentifier: string, submodelIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putSubmodelByIdAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling putSubmodelByIdAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling putSubmodelByIdAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Submodel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing submodel element at a specified path within submodel elements hierarchy
         * @param {SubmodelElement} body Requested submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubmodelElementByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling putSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'submodelIdentifier' is not null or undefined
            if (submodelIdentifier === null || submodelIdentifier === undefined) {
                throw new RequiredError('submodelIdentifier','Required parameter submodelIdentifier was null or undefined when calling putSubmodelElementByPathAasRepository.');
            }
            // verify required parameter 'idShortPath' is not null or undefined
            if (idShortPath === null || idShortPath === undefined) {
                throw new RequiredError('idShortPath','Required parameter idShortPath was null or undefined when calling putSubmodelElementByPathAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)))
                .replace(`{${"submodelIdentifier"}}`, encodeURIComponent(String(submodelIdentifier)))
                .replace(`{${"idShortPath"}}`, encodeURIComponent(String(idShortPath)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SubmodelElement" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileName 
         * @param {Blob} file 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putThumbnailAasRepository(fileName: string, file: globalThis.Blob, aasIdentifier: string, options: any = {}): FetchArgs {
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new RequiredError('fileName','Required parameter fileName was null or undefined when calling putThumbnailAasRepository.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling putThumbnailAasRepository.');
            }
            // verify required parameter 'aasIdentifier' is not null or undefined
            if (aasIdentifier === null || aasIdentifier === undefined) {
                throw new RequiredError('aasIdentifier','Required parameter aasIdentifier was null or undefined when calling putThumbnailAasRepository.');
            }
            const localVarPath = `/shells/{aasIdentifier}/asset-information/thumbnail`
                .replace(`{${"aasIdentifier"}}`, encodeURIComponent(String(aasIdentifier)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            if (fileName !== undefined) {
                localVarFormParams.set('fileName', fileName as any);
            }

            if (file !== undefined) {
                localVarFormParams.set('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetAdministrationShellRepositoryAPIApi - functional programming interface
 * @export
 */
export const AssetAdministrationShellRepositoryAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an Asset Administration Shell
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssetAdministrationShellById(aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).deleteAssetAdministrationShellById(aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).deleteFileByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes the submodel from the Asset Administration Shell and the Repository.
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubmodelByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).deleteSubmodelByIdAasRepository(aasIdentifier, submodelIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a submodel element at a specified path within the submodel elements hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubmodelElementByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).deleteSubmodelElementByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubmodelReferenceByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).deleteSubmodelReferenceByIdAasRepository(aasIdentifier, submodelIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnailAasRepository(aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).deleteThumbnailAasRepository(aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns all Asset Administration Shells
         * @param {Array<string>} [assetIds] A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         * @param {string} [idShort] The Asset Administration Shell’s IdShort
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssetAdministrationShells(assetIds?: Array<string>, idShort?: string, limit?: number, cursor?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAssetAdministrationShellsResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAllAssetAdministrationShells(assetIds, idShort, limit, cursor, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns References to all Asset Administration Shells
         * @param {Array<string>} [assetIds] A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         * @param {string} [idShort] The Asset Administration Shell’s IdShort
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssetAdministrationShellsReference(assetIds?: Array<string>, idShort?: string, limit?: number, cursor?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetReferencesResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAllAssetAdministrationShellsReference(assetIds, idShort, limit, cursor, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, extent?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetSubmodelElementsResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAllSubmodelElementsAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, extent, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetSubmodelElementsMetadataResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAllSubmodelElementsMetadataAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsPathAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, extent?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPathItemsResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAllSubmodelElementsPathAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, extent, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns all submodel elements as a list of References
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetReferencesResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAllSubmodelElementsReferenceAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy in the ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetSubmodelElementsValueResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAllSubmodelElementsValueOnlyAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns all submodel references
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelReferencesAasRepository(aasIdentifier: string, limit?: number, cursor?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetReferencesResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAllSubmodelReferencesAasRepository(aasIdentifier, limit, cursor, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns a specific Asset Administration Shell
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAdministrationShellById(aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AssetAdministrationShell> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAssetAdministrationShellById(aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns a specific Asset Administration Shell as a Reference
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAdministrationShellByIdReferenceAasRepository(aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Reference> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAssetAdministrationShellByIdReferenceAasRepository(aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the Asset Information
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInformationAasRepository(aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AssetInformation> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getAssetInformationAasRepository(aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Downloads file content from a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getFileByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the Operation result of an asynchronous invoked Operation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationAsyncResultAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OperationResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getOperationAsyncResultAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationAsyncResultValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OperationResultValueOnly> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getOperationAsyncResultValueOnlyAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the Operation status of an asynchronous invoked Operation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationAsyncStatusAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BaseOperationResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getOperationAsyncStatusAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the Submodel
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, extent?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Submodel> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelByIdAasRepository(aasIdentifier, submodelIdentifier, level, extent, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the Submodel's metadata elements
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SubmodelMetadata> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelByIdMetadataAasRepository(aasIdentifier, submodelIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the Submodel's metadata elements
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdPathAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PathItem>> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelByIdPathAasRepository(aasIdentifier, submodelIdentifier, level, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the Submodel as a Reference
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Reference> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelByIdReferenceAasRepository(aasIdentifier, submodelIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the Submodel's ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, extent?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SubmodelValue> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelByIdValueOnlyAasRepository(aasIdentifier, submodelIdentifier, level, extent, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, extent?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SubmodelElement> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelElementByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, extent, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SubmodelElementMetadata> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelElementByPathMetadataAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns a specific submodel element from the Submodel at a specified path in the Path notation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PathItem>> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelElementByPathPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns the Reference of a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Reference> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelElementByPathReferenceAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, extent?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SubmodelElementValue> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getSubmodelElementByPathValueOnlyAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, extent, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailAasRepository(aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<globalThis.Blob> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).getThumbnailAasRepository(aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Synchronously invokes an Operation at a specified path
         * @param {OperationRequest} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationAasRepository(body: OperationRequest, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OperationResult> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).invokeOperationAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Asynchronously invokes an Operation at a specified path
         * @param {OperationRequest} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationAsyncAasRepository(body: OperationRequest, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).invokeOperationAsyncAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Asynchronously invokes an Operation at a specified path
         * @param {OperationRequestValueOnly} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationAsyncValueOnlyAasRepository(body: OperationRequestValueOnly, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).invokeOperationAsyncValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Synchronously invokes an Operation at a specified path
         * @param {OperationRequestValueOnly} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationValueOnlyAasRepository(body: OperationRequestValueOnly, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OperationResultValueOnly> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).invokeOperationValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the Submodel
         * @param {Submodel} body Submodel object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelAasRepository(body: Submodel, aasIdentifier: string, submodelIdentifier: string, level?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).patchSubmodelAasRepository(body, aasIdentifier, submodelIdentifier, level, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the metadata attributes of the Submodel
         * @param {SubmodelMetadata} body Submodel object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelByIdMetadataAasRepository(body: SubmodelMetadata, aasIdentifier: string, submodelIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).patchSubmodelByIdMetadataAasRepository(body, aasIdentifier, submodelIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the values of the Submodel
         * @param {SubmodelValue} body Submodel object in the ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelByIdValueOnlyAasRepository(body: SubmodelValue, aasIdentifier: string, submodelIdentifier: string, level?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).patchSubmodelByIdValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, level, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates an existing submodel element value at a specified path within submodel elements hierarchy
         * @param {SubmodelElement} body The updated value of the submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelElementValueByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).patchSubmodelElementValueByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, level, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
         * @param {SubmodelElementMetadata} body The updated metadata attributes of the submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelElementValueByPathMetadata(body: SubmodelElementMetadata, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).patchSubmodelElementValueByPathMetadata(body, aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
         * @param {SubmodelElementValue} body The updated value of the submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelElementValueByPathValueOnly(body: SubmodelElementValue, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).patchSubmodelElementValueByPathValueOnly(body, aasIdentifier, submodelIdentifier, idShortPath, level, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a new Asset Administration Shell
         * @param {AssetAdministrationShell} body Asset Administration Shell object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetAdministrationShell(body: AssetAdministrationShell, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AssetAdministrationShell> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).postAssetAdministrationShell(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a new submodel element
         * @param {SubmodelElement} body Requested submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmodelElementAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SubmodelElement> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).postSubmodelElementAasRepository(body, aasIdentifier, submodelIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a new submodel element at a specified path within submodel elements hierarchy
         * @param {SubmodelElement} body Requested submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmodelElementByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SubmodelElement> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).postSubmodelElementByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a submodel reference at the Asset Administration Shell
         * @param {Reference} body Reference to the Submodel
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmodelReferenceAasRepository(body: Reference, aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Reference> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).postSubmodelReferenceAasRepository(body, aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates an existing Asset Administration Shell
         * @param {AssetAdministrationShell} body Asset Administration Shell object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAssetAdministrationShellById(body: AssetAdministrationShell, aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).putAssetAdministrationShellById(body, aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the Asset Information
         * @param {AssetInformation} body Asset Information object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAssetInformationAasRepository(body: AssetInformation, aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).putAssetInformationAasRepository(body, aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
         * @param {string} fileName 
         * @param {Blob} file 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFileByPathAasRepository(fileName: string, file: Blob, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).putFileByPathAasRepository(fileName, file, aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the Submodel
         * @param {Submodel} body Submodel object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubmodelByIdAasRepository(body: Submodel, aasIdentifier: string, submodelIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).putSubmodelByIdAasRepository(body, aasIdentifier, submodelIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates an existing submodel element at a specified path within submodel elements hierarchy
         * @param {SubmodelElement} body Requested submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubmodelElementByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).putSubmodelElementByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fileName 
         * @param {Blob} file 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putThumbnailAasRepository(fileName: string, file: globalThis.Blob, aasIdentifier: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AssetAdministrationShellRepositoryAPIApiFetchParamCreator(configuration).putThumbnailAasRepository(fileName, file, aasIdentifier, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AssetAdministrationShellRepositoryAPIApi - factory interface
 * @export
 */
export const AssetAdministrationShellRepositoryAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Deletes an Asset Administration Shell
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAssetAdministrationShellById(aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).deleteAssetAdministrationShellById(aasIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).deleteFileByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes the submodel from the Asset Administration Shell and the Repository.
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubmodelByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).deleteSubmodelByIdAasRepository(aasIdentifier, submodelIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a submodel element at a specified path within the submodel elements hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubmodelElementByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).deleteSubmodelElementByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubmodelReferenceByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).deleteSubmodelReferenceByIdAasRepository(aasIdentifier, submodelIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThumbnailAasRepository(aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).deleteThumbnailAasRepository(aasIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns all Asset Administration Shells
         * @param {Array<string>} [assetIds] A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         * @param {string} [idShort] The Asset Administration Shell’s IdShort
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssetAdministrationShells(assetIds?: Array<string>, idShort?: string, limit?: number, cursor?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAllAssetAdministrationShells(assetIds, idShort, limit, cursor, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns References to all Asset Administration Shells
         * @param {Array<string>} [assetIds] A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
         * @param {string} [idShort] The Asset Administration Shell’s IdShort
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAssetAdministrationShellsReference(assetIds?: Array<string>, idShort?: string, limit?: number, cursor?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAllAssetAdministrationShellsReference(assetIds, idShort, limit, cursor, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, extent?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAllSubmodelElementsAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, extent, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAllSubmodelElementsMetadataAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsPathAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, extent?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAllSubmodelElementsPathAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, extent, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns all submodel elements as a list of References
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAllSubmodelElementsReferenceAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns all submodel elements including their hierarchy in the ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelElementsValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAllSubmodelElementsValueOnlyAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns all submodel references
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {number} [limit] The maximum number of elements in the response array
         * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubmodelReferencesAasRepository(aasIdentifier: string, limit?: number, cursor?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAllSubmodelReferencesAasRepository(aasIdentifier, limit, cursor, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns a specific Asset Administration Shell
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAdministrationShellById(aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAssetAdministrationShellById(aasIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns a specific Asset Administration Shell as a Reference
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetAdministrationShellByIdReferenceAasRepository(aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAssetAdministrationShellByIdReferenceAasRepository(aasIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the Asset Information
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInformationAasRepository(aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getAssetInformationAasRepository(aasIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Downloads file content from a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getFileByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the Operation result of an asynchronous invoked Operation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationAsyncResultAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getOperationAsyncResultAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationAsyncResultValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getOperationAsyncResultValueOnlyAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the Operation status of an asynchronous invoked Operation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationAsyncStatusAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getOperationAsyncStatusAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the Submodel
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, extent?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelByIdAasRepository(aasIdentifier, submodelIdentifier, level, extent, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the Submodel's metadata elements
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelByIdMetadataAasRepository(aasIdentifier, submodelIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the Submodel's metadata elements
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdPathAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelByIdPathAasRepository(aasIdentifier, submodelIdentifier, level, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the Submodel as a Reference
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelByIdReferenceAasRepository(aasIdentifier, submodelIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the Submodel's ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelByIdValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, extent?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelByIdValueOnlyAasRepository(aasIdentifier, submodelIdentifier, level, extent, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, extent?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelElementByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, extent, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelElementByPathMetadataAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns a specific submodel element from the Submodel at a specified path in the Path notation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelElementByPathPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns the Reference of a specific submodel element from the Submodel at a specified path
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelElementByPathReferenceAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {string} [extent] Determines to which extent the resource is being serialized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmodelElementByPathValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, extent?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getSubmodelElementByPathValueOnlyAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, extent, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailAasRepository(aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).getThumbnailAasRepository(aasIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Synchronously invokes an Operation at a specified path
         * @param {OperationRequest} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationAasRepository(body: OperationRequest, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).invokeOperationAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Asynchronously invokes an Operation at a specified path
         * @param {OperationRequest} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationAsyncAasRepository(body: OperationRequest, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).invokeOperationAsyncAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Asynchronously invokes an Operation at a specified path
         * @param {OperationRequestValueOnly} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationAsyncValueOnlyAasRepository(body: OperationRequestValueOnly, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).invokeOperationAsyncValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Synchronously invokes an Operation at a specified path
         * @param {OperationRequestValueOnly} body Operation request object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeOperationValueOnlyAasRepository(body: OperationRequestValueOnly, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).invokeOperationValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the Submodel
         * @param {Submodel} body Submodel object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelAasRepository(body: Submodel, aasIdentifier: string, submodelIdentifier: string, level?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).patchSubmodelAasRepository(body, aasIdentifier, submodelIdentifier, level, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the metadata attributes of the Submodel
         * @param {SubmodelMetadata} body Submodel object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelByIdMetadataAasRepository(body: SubmodelMetadata, aasIdentifier: string, submodelIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).patchSubmodelByIdMetadataAasRepository(body, aasIdentifier, submodelIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the values of the Submodel
         * @param {SubmodelValue} body Submodel object in the ValueOnly representation
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelByIdValueOnlyAasRepository(body: SubmodelValue, aasIdentifier: string, submodelIdentifier: string, level?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).patchSubmodelByIdValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, level, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates an existing submodel element value at a specified path within submodel elements hierarchy
         * @param {SubmodelElement} body The updated value of the submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelElementValueByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).patchSubmodelElementValueByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, level, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
         * @param {SubmodelElementMetadata} body The updated metadata attributes of the submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelElementValueByPathMetadata(body: SubmodelElementMetadata, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).patchSubmodelElementValueByPathMetadata(body, aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
         * @param {SubmodelElementValue} body The updated value of the submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {string} [level] Determines the structural depth of the respective resource content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmodelElementValueByPathValueOnly(body: SubmodelElementValue, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).patchSubmodelElementValueByPathValueOnly(body, aasIdentifier, submodelIdentifier, idShortPath, level, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a new Asset Administration Shell
         * @param {AssetAdministrationShell} body Asset Administration Shell object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAssetAdministrationShell(body: AssetAdministrationShell, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).postAssetAdministrationShell(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a new submodel element
         * @param {SubmodelElement} body Requested submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmodelElementAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).postSubmodelElementAasRepository(body, aasIdentifier, submodelIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a new submodel element at a specified path within submodel elements hierarchy
         * @param {SubmodelElement} body Requested submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmodelElementByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).postSubmodelElementByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a submodel reference at the Asset Administration Shell
         * @param {Reference} body Reference to the Submodel
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmodelReferenceAasRepository(body: Reference, aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).postSubmodelReferenceAasRepository(body, aasIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates an existing Asset Administration Shell
         * @param {AssetAdministrationShell} body Asset Administration Shell object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAssetAdministrationShellById(body: AssetAdministrationShell, aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).putAssetAdministrationShellById(body, aasIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the Asset Information
         * @param {AssetInformation} body Asset Information object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAssetInformationAasRepository(body: AssetInformation, aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).putAssetInformationAasRepository(body, aasIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
         * @param {string} fileName 
         * @param {Blob} file 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFileByPathAasRepository(fileName: string, file: Blob, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).putFileByPathAasRepository(fileName, file, aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the Submodel
         * @param {Submodel} body Submodel object
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubmodelByIdAasRepository(body: Submodel, aasIdentifier: string, submodelIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).putSubmodelByIdAasRepository(body, aasIdentifier, submodelIdentifier, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates an existing submodel element at a specified path within submodel elements hierarchy
         * @param {SubmodelElement} body Requested submodel element
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
         * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSubmodelElementByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).putSubmodelElementByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fileName 
         * @param {Blob} file 
         * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putThumbnailAasRepository(fileName: string, file: globalThis.Blob, aasIdentifier: string, options?: any) {
            return AssetAdministrationShellRepositoryAPIApiFp(configuration).putThumbnailAasRepository(fileName, file, aasIdentifier, options)(fetch, basePath);
        },
    };
};

/**
 * AssetAdministrationShellRepositoryAPIApi - object-oriented interface
 * @export
 * @class AssetAdministrationShellRepositoryAPIApi
 * @extends {BaseAPI}
 */
export class AssetAdministrationShellRepositoryAPIApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an Asset Administration Shell
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public deleteAssetAdministrationShellById(aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).deleteAssetAdministrationShellById(aasIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public deleteFileByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).deleteFileByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes the submodel from the Asset Administration Shell and the Repository.
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public deleteSubmodelByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).deleteSubmodelByIdAasRepository(aasIdentifier, submodelIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a submodel element at a specified path within the submodel elements hierarchy
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public deleteSubmodelElementByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).deleteSubmodelElementByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public deleteSubmodelReferenceByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).deleteSubmodelReferenceByIdAasRepository(aasIdentifier, submodelIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public deleteThumbnailAasRepository(aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).deleteThumbnailAasRepository(aasIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns all Asset Administration Shells
     * @param {Array<string>} [assetIds] A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
     * @param {string} [idShort] The Asset Administration Shell’s IdShort
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAllAssetAdministrationShells(assetIds?: Array<string>, idShort?: string, limit?: number, cursor?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAllAssetAdministrationShells(assetIds, idShort, limit, cursor, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns References to all Asset Administration Shells
     * @param {Array<string>} [assetIds] A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId).
     * @param {string} [idShort] The Asset Administration Shell’s IdShort
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAllAssetAdministrationShellsReference(assetIds?: Array<string>, idShort?: string, limit?: number, cursor?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAllAssetAdministrationShellsReference(assetIds, idShort, limit, cursor, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns all submodel elements including their hierarchy
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {string} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAllSubmodelElementsAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, extent?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAllSubmodelElementsAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, extent, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns all submodel elements including their hierarchy
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAllSubmodelElementsMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAllSubmodelElementsMetadataAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns all submodel elements including their hierarchy
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {string} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAllSubmodelElementsPathAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, extent?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAllSubmodelElementsPathAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, extent, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns all submodel elements as a list of References
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAllSubmodelElementsReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAllSubmodelElementsReferenceAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns all submodel elements including their hierarchy in the ValueOnly representation
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAllSubmodelElementsValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, limit?: number, cursor?: string, level?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAllSubmodelElementsValueOnlyAasRepository(aasIdentifier, submodelIdentifier, limit, cursor, level, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns all submodel references
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAllSubmodelReferencesAasRepository(aasIdentifier: string, limit?: number, cursor?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAllSubmodelReferencesAasRepository(aasIdentifier, limit, cursor, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns a specific Asset Administration Shell
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAssetAdministrationShellById(aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAssetAdministrationShellById(aasIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns a specific Asset Administration Shell as a Reference
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAssetAdministrationShellByIdReferenceAasRepository(aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAssetAdministrationShellByIdReferenceAasRepository(aasIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the Asset Information
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getAssetInformationAasRepository(aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getAssetInformationAasRepository(aasIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Downloads file content from a specific submodel element from the Submodel at a specified path
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getFileByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getFileByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the Operation result of an asynchronous invoked Operation
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getOperationAsyncResultAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getOperationAsyncResultAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the ValueOnly notation of the Operation result of an asynchronous invoked Operation
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getOperationAsyncResultValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getOperationAsyncResultValueOnlyAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the Operation status of an asynchronous invoked Operation
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getOperationAsyncStatusAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, handleId: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getOperationAsyncStatusAasRepository(aasIdentifier, submodelIdentifier, idShortPath, handleId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the Submodel
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {string} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelByIdAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, extent?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelByIdAasRepository(aasIdentifier, submodelIdentifier, level, extent, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the Submodel's metadata elements
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelByIdMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelByIdMetadataAasRepository(aasIdentifier, submodelIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the Submodel's metadata elements
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelByIdPathAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelByIdPathAasRepository(aasIdentifier, submodelIdentifier, level, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the Submodel as a Reference
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelByIdReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelByIdReferenceAasRepository(aasIdentifier, submodelIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the Submodel's ValueOnly representation
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {string} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelByIdValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, level?: string, extent?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelByIdValueOnlyAasRepository(aasIdentifier, submodelIdentifier, level, extent, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns a specific submodel element from the Submodel at a specified path
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {string} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelElementByPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, extent?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelElementByPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, extent, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelElementByPathMetadataAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelElementByPathMetadataAasRepository(aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns a specific submodel element from the Submodel at a specified path in the Path notation
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelElementByPathPathAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelElementByPathPathAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns the Reference of a specific submodel element from the Submodel at a specified path
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelElementByPathReferenceAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelElementByPathReferenceAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {string} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getSubmodelElementByPathValueOnlyAasRepository(aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, extent?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getSubmodelElementByPathValueOnlyAasRepository(aasIdentifier, submodelIdentifier, idShortPath, level, extent, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public getThumbnailAasRepository(aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).getThumbnailAasRepository(aasIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Synchronously invokes an Operation at a specified path
     * @param {OperationRequest} body Operation request object
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public invokeOperationAasRepository(body: OperationRequest, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).invokeOperationAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Asynchronously invokes an Operation at a specified path
     * @param {OperationRequest} body Operation request object
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public invokeOperationAsyncAasRepository(body: OperationRequest, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).invokeOperationAsyncAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Asynchronously invokes an Operation at a specified path
     * @param {OperationRequestValueOnly} body Operation request object
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public invokeOperationAsyncValueOnlyAasRepository(body: OperationRequestValueOnly, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).invokeOperationAsyncValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Synchronously invokes an Operation at a specified path
     * @param {OperationRequestValueOnly} body Operation request object
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public invokeOperationValueOnlyAasRepository(body: OperationRequestValueOnly, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).invokeOperationValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the Submodel
     * @param {Submodel} body Submodel object
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public patchSubmodelAasRepository(body: Submodel, aasIdentifier: string, submodelIdentifier: string, level?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).patchSubmodelAasRepository(body, aasIdentifier, submodelIdentifier, level, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the metadata attributes of the Submodel
     * @param {SubmodelMetadata} body Submodel object
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public patchSubmodelByIdMetadataAasRepository(body: SubmodelMetadata, aasIdentifier: string, submodelIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).patchSubmodelByIdMetadataAasRepository(body, aasIdentifier, submodelIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the values of the Submodel
     * @param {SubmodelValue} body Submodel object in the ValueOnly representation
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public patchSubmodelByIdValueOnlyAasRepository(body: SubmodelValue, aasIdentifier: string, submodelIdentifier: string, level?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).patchSubmodelByIdValueOnlyAasRepository(body, aasIdentifier, submodelIdentifier, level, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates an existing submodel element value at a specified path within submodel elements hierarchy
     * @param {SubmodelElement} body The updated value of the submodel element
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public patchSubmodelElementValueByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).patchSubmodelElementValueByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, level, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
     * @param {SubmodelElementMetadata} body The updated metadata attributes of the submodel element
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public patchSubmodelElementValueByPathMetadata(body: SubmodelElementMetadata, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).patchSubmodelElementValueByPathMetadata(body, aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
     * @param {SubmodelElementValue} body The updated value of the submodel element
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public patchSubmodelElementValueByPathValueOnly(body: SubmodelElementValue, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, level?: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).patchSubmodelElementValueByPathValueOnly(body, aasIdentifier, submodelIdentifier, idShortPath, level, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a new Asset Administration Shell
     * @param {AssetAdministrationShell} body Asset Administration Shell object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public postAssetAdministrationShell(body: AssetAdministrationShell, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).postAssetAdministrationShell(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a new submodel element
     * @param {SubmodelElement} body Requested submodel element
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public postSubmodelElementAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).postSubmodelElementAasRepository(body, aasIdentifier, submodelIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a new submodel element at a specified path within submodel elements hierarchy
     * @param {SubmodelElement} body Requested submodel element
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public postSubmodelElementByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).postSubmodelElementByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a submodel reference at the Asset Administration Shell
     * @param {Reference} body Reference to the Submodel
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public postSubmodelReferenceAasRepository(body: Reference, aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).postSubmodelReferenceAasRepository(body, aasIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates an existing Asset Administration Shell
     * @param {AssetAdministrationShell} body Asset Administration Shell object
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public putAssetAdministrationShellById(body: AssetAdministrationShell, aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).putAssetAdministrationShellById(body, aasIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the Asset Information
     * @param {AssetInformation} body Asset Information object
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public putAssetInformationAasRepository(body: AssetInformation, aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).putAssetInformationAasRepository(body, aasIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} fileName 
     * @param {Blob} file 
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public putFileByPathAasRepository(fileName: string, file: Blob, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).putFileByPathAasRepository(fileName, file, aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the Submodel
     * @param {Submodel} body Submodel object
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public putSubmodelByIdAasRepository(body: Submodel, aasIdentifier: string, submodelIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).putSubmodelByIdAasRepository(body, aasIdentifier, submodelIdentifier, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates an existing submodel element at a specified path within submodel elements hierarchy
     * @param {SubmodelElement} body Requested submodel element
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public putSubmodelElementByPathAasRepository(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, idShortPath: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).putSubmodelElementByPathAasRepository(body, aasIdentifier, submodelIdentifier, idShortPath, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fileName 
     * @param {Blob} file 
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellRepositoryAPIApi
     */
    public putThumbnailAasRepository(fileName: string, file: globalThis.Blob, aasIdentifier: string, options?: any) {
        return AssetAdministrationShellRepositoryAPIApiFp(this.configuration).putThumbnailAasRepository(fileName, file, aasIdentifier, options)(this.fetch, this.basePath);
    }

}
/**
 * DescriptionAPIApi - fetch parameter creator
 * @export
 */
export const DescriptionAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the self-describing information of a network resource (ServiceDescription)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescription(options: any = {}): FetchArgs {
            const localVarPath = `/description`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DescriptionAPIApi - functional programming interface
 * @export
 */
export const DescriptionAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the self-describing information of a network resource (ServiceDescription)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescription(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceDescription> {
            const localVarFetchArgs = DescriptionAPIApiFetchParamCreator(configuration).getDescription(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DescriptionAPIApi - factory interface
 * @export
 */
export const DescriptionAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Returns the self-describing information of a network resource (ServiceDescription)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescription(options?: any) {
            return DescriptionAPIApiFp(configuration).getDescription(options)(fetch, basePath);
        },
    };
};

/**
 * DescriptionAPIApi - object-oriented interface
 * @export
 * @class DescriptionAPIApi
 * @extends {BaseAPI}
 */
export class DescriptionAPIApi extends BaseAPI {
    /**
     * 
     * @summary Returns the self-describing information of a network resource (ServiceDescription)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DescriptionAPIApi
     */
    public getDescription(options?: any) {
        return DescriptionAPIApiFp(this.configuration).getDescription(options)(this.fetch, this.basePath);
    }

}
/**
 * SerializationAPIApi - fetch parameter creator
 * @export
 */
export const SerializationAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns an appropriate serialization based on the specified format (see SerializationFormat)
         * @param {Array<string>} [aasIds] The Asset Administration Shells&#x27; unique ids (UTF8-BASE64-URL-encoded)
         * @param {Array<string>} [submodelIds] The Submodels&#x27; unique ids (UTF8-BASE64-URL-encoded)
         * @param {boolean} [includeConceptDescriptions] Include Concept Descriptions?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSerializationByIds(aasIds?: Array<string>, submodelIds?: Array<string>, includeConceptDescriptions?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/serialization`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (aasIds) {
                localVarQueryParameter['aasIds'] = aasIds;
            }

            if (submodelIds) {
                localVarQueryParameter['submodelIds'] = submodelIds;
            }

            if (includeConceptDescriptions !== undefined) {
                localVarQueryParameter['includeConceptDescriptions'] = includeConceptDescriptions;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SerializationAPIApi - functional programming interface
 * @export
 */
export const SerializationAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns an appropriate serialization based on the specified format (see SerializationFormat)
         * @param {Array<string>} [aasIds] The Asset Administration Shells&#x27; unique ids (UTF8-BASE64-URL-encoded)
         * @param {Array<string>} [submodelIds] The Submodels&#x27; unique ids (UTF8-BASE64-URL-encoded)
         * @param {boolean} [includeConceptDescriptions] Include Concept Descriptions?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSerializationByIds(aasIds?: Array<string>, submodelIds?: Array<string>, includeConceptDescriptions?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = SerializationAPIApiFetchParamCreator(configuration).generateSerializationByIds(aasIds, submodelIds, includeConceptDescriptions, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SerializationAPIApi - factory interface
 * @export
 */
export const SerializationAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Returns an appropriate serialization based on the specified format (see SerializationFormat)
         * @param {Array<string>} [aasIds] The Asset Administration Shells&#x27; unique ids (UTF8-BASE64-URL-encoded)
         * @param {Array<string>} [submodelIds] The Submodels&#x27; unique ids (UTF8-BASE64-URL-encoded)
         * @param {boolean} [includeConceptDescriptions] Include Concept Descriptions?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSerializationByIds(aasIds?: Array<string>, submodelIds?: Array<string>, includeConceptDescriptions?: boolean, options?: any) {
            return SerializationAPIApiFp(configuration).generateSerializationByIds(aasIds, submodelIds, includeConceptDescriptions, options)(fetch, basePath);
        },
    };
};

/**
 * SerializationAPIApi - object-oriented interface
 * @export
 * @class SerializationAPIApi
 * @extends {BaseAPI}
 */
export class SerializationAPIApi extends BaseAPI {
    /**
     * 
     * @summary Returns an appropriate serialization based on the specified format (see SerializationFormat)
     * @param {Array<string>} [aasIds] The Asset Administration Shells&#x27; unique ids (UTF8-BASE64-URL-encoded)
     * @param {Array<string>} [submodelIds] The Submodels&#x27; unique ids (UTF8-BASE64-URL-encoded)
     * @param {boolean} [includeConceptDescriptions] Include Concept Descriptions?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SerializationAPIApi
     */
    public generateSerializationByIds(aasIds?: Array<string>, submodelIds?: Array<string>, includeConceptDescriptions?: boolean, options?: any) {
        return SerializationAPIApiFp(this.configuration).generateSerializationByIds(aasIds, submodelIds, includeConceptDescriptions, options)(this.fetch, this.basePath);
    }

}
