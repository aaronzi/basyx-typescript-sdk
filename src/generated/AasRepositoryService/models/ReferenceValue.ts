/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceTypes } from './ReferenceTypes';
import {
    ReferenceTypesFromJSON,
    ReferenceTypesFromJSONTyped,
    ReferenceTypesToJSON,
    ReferenceTypesToJSONTyped,
} from './ReferenceTypes';
import type { Key } from './Key';
import {
    KeyFromJSON,
    KeyFromJSONTyped,
    KeyToJSON,
    KeyToJSONTyped,
} from './Key';

/**
 * 
 * @export
 * @interface ReferenceValue
 */
export interface ReferenceValue {
    /**
     * 
     * @type {ReferenceTypes}
     * @memberof ReferenceValue
     */
    type?: ReferenceTypes;
    /**
     * 
     * @type {Array<Key>}
     * @memberof ReferenceValue
     */
    keys?: Array<Key>;
}



/**
 * Check if a given object implements the ReferenceValue interface.
 */
export function instanceOfReferenceValue(value: object): value is ReferenceValue {
    return true;
}

export function ReferenceValueFromJSON(json: any): ReferenceValue {
    return ReferenceValueFromJSONTyped(json, false);
}

export function ReferenceValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReferenceValue {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : ReferenceTypesFromJSON(json['type']),
        'keys': json['keys'] == null ? undefined : ((json['keys'] as Array<any>).map(KeyFromJSON)),
    };
}

export function ReferenceValueToJSON(json: any): ReferenceValue {
    return ReferenceValueToJSONTyped(json, false);
}

export function ReferenceValueToJSONTyped(value?: ReferenceValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': ReferenceTypesToJSON(value['type']),
        'keys': value['keys'] == null ? undefined : ((value['keys'] as Array<any>).map(KeyToJSON)),
    };
}

