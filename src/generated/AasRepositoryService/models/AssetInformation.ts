/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SpecificAssetId } from './SpecificAssetId';
import {
    SpecificAssetIdFromJSON,
    SpecificAssetIdFromJSONTyped,
    SpecificAssetIdToJSON,
    SpecificAssetIdToJSONTyped,
} from './SpecificAssetId';
import type { AssetKind } from './AssetKind';
import {
    AssetKindFromJSON,
    AssetKindFromJSONTyped,
    AssetKindToJSON,
    AssetKindToJSONTyped,
} from './AssetKind';
import type { Resource } from './Resource';
import {
    ResourceFromJSON,
    ResourceFromJSONTyped,
    ResourceToJSON,
    ResourceToJSONTyped,
} from './Resource';

/**
 * 
 * @export
 * @interface AssetInformation
 */
export interface AssetInformation {
    /**
     * 
     * @type {AssetKind}
     * @memberof AssetInformation
     */
    assetKind: AssetKind;
    /**
     * 
     * @type {string}
     * @memberof AssetInformation
     */
    globalAssetId?: string;
    /**
     * 
     * @type {Array<SpecificAssetId>}
     * @memberof AssetInformation
     */
    specificAssetIds?: Array<SpecificAssetId>;
    /**
     * 
     * @type {string}
     * @memberof AssetInformation
     */
    assetType?: string;
    /**
     * 
     * @type {Resource}
     * @memberof AssetInformation
     */
    defaultThumbnail?: Resource;
}



/**
 * Check if a given object implements the AssetInformation interface.
 */
export function instanceOfAssetInformation(value: object): value is AssetInformation {
    if (!('assetKind' in value) || value['assetKind'] === undefined) return false;
    return true;
}

export function AssetInformationFromJSON(json: any): AssetInformation {
    return AssetInformationFromJSONTyped(json, false);
}

export function AssetInformationFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssetInformation {
    if (json == null) {
        return json;
    }
    return {
        
        'assetKind': AssetKindFromJSON(json['assetKind']),
        'globalAssetId': json['globalAssetId'] == null ? undefined : json['globalAssetId'],
        'specificAssetIds': json['specificAssetIds'] == null ? undefined : ((json['specificAssetIds'] as Array<any>).map(SpecificAssetIdFromJSON)),
        'assetType': json['assetType'] == null ? undefined : json['assetType'],
        'defaultThumbnail': json['defaultThumbnail'] == null ? undefined : ResourceFromJSON(json['defaultThumbnail']),
    };
}

export function AssetInformationToJSON(json: any): AssetInformation {
    return AssetInformationToJSONTyped(json, false);
}

export function AssetInformationToJSONTyped(value?: AssetInformation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'assetKind': AssetKindToJSON(value['assetKind']),
        'globalAssetId': value['globalAssetId'],
        'specificAssetIds': value['specificAssetIds'] == null ? undefined : ((value['specificAssetIds'] as Array<any>).map(SpecificAssetIdToJSON)),
        'assetType': value['assetType'],
        'defaultThumbnail': ResourceToJSON(value['defaultThumbnail']),
    };
}

