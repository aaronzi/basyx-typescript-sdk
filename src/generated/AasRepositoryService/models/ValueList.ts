/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ValueReferencePair } from './ValueReferencePair';
import {
    ValueReferencePairFromJSON,
    ValueReferencePairFromJSONTyped,
    ValueReferencePairToJSON,
    ValueReferencePairToJSONTyped,
} from './ValueReferencePair';

/**
 * 
 * @export
 * @interface ValueList
 */
export interface ValueList {
    /**
     * 
     * @type {Array<ValueReferencePair>}
     * @memberof ValueList
     */
    valueReferencePairs: Array<ValueReferencePair>;
}

/**
 * Check if a given object implements the ValueList interface.
 */
export function instanceOfValueList(value: object): value is ValueList {
    if (!('valueReferencePairs' in value) || value['valueReferencePairs'] === undefined) return false;
    return true;
}

export function ValueListFromJSON(json: any): ValueList {
    return ValueListFromJSONTyped(json, false);
}

export function ValueListFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueList {
    if (json == null) {
        return json;
    }
    return {
        
        'valueReferencePairs': ((json['valueReferencePairs'] as Array<any>).map(ValueReferencePairFromJSON)),
    };
}

export function ValueListToJSON(json: any): ValueList {
    return ValueListToJSONTyped(json, false);
}

export function ValueListToJSONTyped(value?: ValueList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'valueReferencePairs': ((value['valueReferencePairs'] as Array<any>).map(ValueReferencePairToJSON)),
    };
}

