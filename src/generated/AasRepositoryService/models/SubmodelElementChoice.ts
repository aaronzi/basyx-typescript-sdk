/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AnnotatedRelationshipElement } from './AnnotatedRelationshipElement';
import {
    instanceOfAnnotatedRelationshipElement,
    AnnotatedRelationshipElementFromJSON,
    AnnotatedRelationshipElementFromJSONTyped,
    AnnotatedRelationshipElementToJSON,
} from './AnnotatedRelationshipElement';
import type { BasicEventElement } from './BasicEventElement';
import {
    instanceOfBasicEventElement,
    BasicEventElementFromJSON,
    BasicEventElementFromJSONTyped,
    BasicEventElementToJSON,
} from './BasicEventElement';
import type { Blob } from './Blob';
import {
    instanceOfBlob,
    BlobFromJSON,
    BlobFromJSONTyped,
    BlobToJSON,
} from './Blob';
import type { Capability } from './Capability';
import {
    instanceOfCapability,
    CapabilityFromJSON,
    CapabilityFromJSONTyped,
    CapabilityToJSON,
} from './Capability';
import type { Entity } from './Entity';
import {
    instanceOfEntity,
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';
import type { ModelFile } from './ModelFile';
import {
    instanceOfModelFile,
    ModelFileFromJSON,
    ModelFileFromJSONTyped,
    ModelFileToJSON,
} from './ModelFile';
import type { MultiLanguageProperty } from './MultiLanguageProperty';
import {
    instanceOfMultiLanguageProperty,
    MultiLanguagePropertyFromJSON,
    MultiLanguagePropertyFromJSONTyped,
    MultiLanguagePropertyToJSON,
} from './MultiLanguageProperty';
import type { Operation } from './Operation';
import {
    instanceOfOperation,
    OperationFromJSON,
    OperationFromJSONTyped,
    OperationToJSON,
} from './Operation';
import type { Property } from './Property';
import {
    instanceOfProperty,
    PropertyFromJSON,
    PropertyFromJSONTyped,
    PropertyToJSON,
} from './Property';
import type { Range } from './Range';
import {
    instanceOfRange,
    RangeFromJSON,
    RangeFromJSONTyped,
    RangeToJSON,
} from './Range';
import type { ReferenceElement } from './ReferenceElement';
import {
    instanceOfReferenceElement,
    ReferenceElementFromJSON,
    ReferenceElementFromJSONTyped,
    ReferenceElementToJSON,
} from './ReferenceElement';
import type { RelationshipElement } from './RelationshipElement';
import {
    instanceOfRelationshipElement,
    RelationshipElementFromJSON,
    RelationshipElementFromJSONTyped,
    RelationshipElementToJSON,
} from './RelationshipElement';
import type { SubmodelElementCollection } from './SubmodelElementCollection';
import {
    instanceOfSubmodelElementCollection,
    SubmodelElementCollectionFromJSON,
    SubmodelElementCollectionFromJSONTyped,
    SubmodelElementCollectionToJSON,
} from './SubmodelElementCollection';
import type { SubmodelElementList } from './SubmodelElementList';
import {
    instanceOfSubmodelElementList,
    SubmodelElementListFromJSON,
    SubmodelElementListFromJSONTyped,
    SubmodelElementListToJSON,
} from './SubmodelElementList';

/**
 * @type SubmodelElementChoice
 * 
 * @export
 */
export type SubmodelElementChoice = AnnotatedRelationshipElement | BasicEventElement | Blob | Capability | Entity | ModelFile | MultiLanguageProperty | Operation | Property | Range | ReferenceElement | RelationshipElement | SubmodelElementCollection | SubmodelElementList;

export function SubmodelElementChoiceFromJSON(json: any): SubmodelElementChoice {
    return SubmodelElementChoiceFromJSONTyped(json, false);
}

export function SubmodelElementChoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubmodelElementChoice {
    if (json == null) {
        return json;
    }
    if (instanceOfAnnotatedRelationshipElement(json)) {
        return AnnotatedRelationshipElementFromJSONTyped(json, true);
    }
    if (instanceOfBasicEventElement(json)) {
        return BasicEventElementFromJSONTyped(json, true);
    }
    if (instanceOfBlob(json)) {
        return BlobFromJSONTyped(json, true);
    }
    if (instanceOfCapability(json)) {
        return CapabilityFromJSONTyped(json, true);
    }
    if (instanceOfEntity(json)) {
        return EntityFromJSONTyped(json, true);
    }
    if (instanceOfModelFile(json)) {
        return ModelFileFromJSONTyped(json, true);
    }
    if (instanceOfMultiLanguageProperty(json)) {
        return MultiLanguagePropertyFromJSONTyped(json, true);
    }
    if (instanceOfOperation(json)) {
        return OperationFromJSONTyped(json, true);
    }
    if (instanceOfProperty(json)) {
        return PropertyFromJSONTyped(json, true);
    }
    if (instanceOfRange(json)) {
        return RangeFromJSONTyped(json, true);
    }
    if (instanceOfReferenceElement(json)) {
        return ReferenceElementFromJSONTyped(json, true);
    }
    if (instanceOfRelationshipElement(json)) {
        return RelationshipElementFromJSONTyped(json, true);
    }
    if (instanceOfSubmodelElementCollection(json)) {
        return SubmodelElementCollectionFromJSONTyped(json, true);
    }
    if (instanceOfSubmodelElementList(json)) {
        return SubmodelElementListFromJSONTyped(json, true);
    }

    return {} as any;
}

export function SubmodelElementChoiceToJSON(json: any): any {
    return SubmodelElementChoiceToJSONTyped(json, false);
}

export function SubmodelElementChoiceToJSONTyped(value?: SubmodelElementChoice | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (instanceOfAnnotatedRelationshipElement(value)) {
        return AnnotatedRelationshipElementToJSON(value as AnnotatedRelationshipElement);
    }
    if (instanceOfBasicEventElement(value)) {
        return BasicEventElementToJSON(value as BasicEventElement);
    }
    if (instanceOfBlob(value)) {
        return BlobToJSON(value as Blob);
    }
    if (instanceOfCapability(value)) {
        return CapabilityToJSON(value as Capability);
    }
    if (instanceOfEntity(value)) {
        return EntityToJSON(value as Entity);
    }
    if (instanceOfModelFile(value)) {
        return ModelFileToJSON(value as ModelFile);
    }
    if (instanceOfMultiLanguageProperty(value)) {
        return MultiLanguagePropertyToJSON(value as MultiLanguageProperty);
    }
    if (instanceOfOperation(value)) {
        return OperationToJSON(value as Operation);
    }
    if (instanceOfProperty(value)) {
        return PropertyToJSON(value as Property);
    }
    if (instanceOfRange(value)) {
        return RangeToJSON(value as Range);
    }
    if (instanceOfReferenceElement(value)) {
        return ReferenceElementToJSON(value as ReferenceElement);
    }
    if (instanceOfRelationshipElement(value)) {
        return RelationshipElementToJSON(value as RelationshipElement);
    }
    if (instanceOfSubmodelElementCollection(value)) {
        return SubmodelElementCollectionToJSON(value as SubmodelElementCollection);
    }
    if (instanceOfSubmodelElementList(value)) {
        return SubmodelElementListToJSON(value as SubmodelElementList);
    }

    return {};
}

