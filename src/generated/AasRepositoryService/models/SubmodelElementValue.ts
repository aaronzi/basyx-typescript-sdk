/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AnnotatedRelationshipElementValue } from './AnnotatedRelationshipElementValue';
import {
    instanceOfAnnotatedRelationshipElementValue,
    AnnotatedRelationshipElementValueFromJSON,
    AnnotatedRelationshipElementValueFromJSONTyped,
    AnnotatedRelationshipElementValueToJSON,
} from './AnnotatedRelationshipElementValue';
import type { Array<SubmodelElementValue> } from './Array&lt;SubmodelElementValue&gt;';
import {
    instanceOfArray<SubmodelElementValue>,
    Array<SubmodelElementValue>FromJSON,
    Array<SubmodelElementValue>FromJSONTyped,
    Array<SubmodelElementValue>ToJSON,
} from './Array&lt;SubmodelElementValue&gt;';
import type { BasicEventElementValue } from './BasicEventElementValue';
import {
    instanceOfBasicEventElementValue,
    BasicEventElementValueFromJSON,
    BasicEventElementValueFromJSONTyped,
    BasicEventElementValueToJSON,
} from './BasicEventElementValue';
import type { BlobValue } from './BlobValue';
import {
    instanceOfBlobValue,
    BlobValueFromJSON,
    BlobValueFromJSONTyped,
    BlobValueToJSON,
} from './BlobValue';
import type { EntityValue } from './EntityValue';
import {
    instanceOfEntityValue,
    EntityValueFromJSON,
    EntityValueFromJSONTyped,
    EntityValueToJSON,
} from './EntityValue';
import type { FileValue } from './FileValue';
import {
    instanceOfFileValue,
    FileValueFromJSON,
    FileValueFromJSONTyped,
    FileValueToJSON,
} from './FileValue';
import type { PropertyValue } from './PropertyValue';
import {
    instanceOfPropertyValue,
    PropertyValueFromJSON,
    PropertyValueFromJSONTyped,
    PropertyValueToJSON,
} from './PropertyValue';
import type { RangeValue } from './RangeValue';
import {
    instanceOfRangeValue,
    RangeValueFromJSON,
    RangeValueFromJSONTyped,
    RangeValueToJSON,
} from './RangeValue';
import type { ReferenceElementValue } from './ReferenceElementValue';
import {
    instanceOfReferenceElementValue,
    ReferenceElementValueFromJSON,
    ReferenceElementValueFromJSONTyped,
    ReferenceElementValueToJSON,
} from './ReferenceElementValue';
import type { RelationshipElementValue } from './RelationshipElementValue';
import {
    instanceOfRelationshipElementValue,
    RelationshipElementValueFromJSON,
    RelationshipElementValueFromJSONTyped,
    RelationshipElementValueToJSON,
} from './RelationshipElementValue';
import type { object } from './object';
import {
    instanceOfobject,
    objectFromJSON,
    objectFromJSONTyped,
    objectToJSON,
} from './object';

/**
 * @type SubmodelElementValue
 * 
 * @export
 */
export type SubmodelElementValue = AnnotatedRelationshipElementValue | Array<SubmodelElementValue> | BasicEventElementValue | BlobValue | EntityValue | FileValue | PropertyValue | RangeValue | ReferenceElementValue | RelationshipElementValue | object;

export function SubmodelElementValueFromJSON(json: any): SubmodelElementValue {
    return SubmodelElementValueFromJSONTyped(json, false);
}

export function SubmodelElementValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubmodelElementValue {
    if (json == null) {
        return json;
    }
    if (instanceOfAnnotatedRelationshipElementValue(json)) {
        return AnnotatedRelationshipElementValueFromJSONTyped(json, true);
    }
    if (instanceOfArray<SubmodelElementValue>(json)) {
        return Array<SubmodelElementValue>FromJSONTyped(json, true);
    }
    if (instanceOfBasicEventElementValue(json)) {
        return BasicEventElementValueFromJSONTyped(json, true);
    }
    if (instanceOfBlobValue(json)) {
        return BlobValueFromJSONTyped(json, true);
    }
    if (instanceOfEntityValue(json)) {
        return EntityValueFromJSONTyped(json, true);
    }
    if (instanceOfFileValue(json)) {
        return FileValueFromJSONTyped(json, true);
    }
    if (instanceOfPropertyValue(json)) {
        return PropertyValueFromJSONTyped(json, true);
    }
    if (instanceOfRangeValue(json)) {
        return RangeValueFromJSONTyped(json, true);
    }
    if (instanceOfReferenceElementValue(json)) {
        return ReferenceElementValueFromJSONTyped(json, true);
    }
    if (instanceOfRelationshipElementValue(json)) {
        return RelationshipElementValueFromJSONTyped(json, true);
    }
    if (instanceOfobject(json)) {
        return objectFromJSONTyped(json, true);
    }

    return {} as any;
}

export function SubmodelElementValueToJSON(json: any): any {
    return SubmodelElementValueToJSONTyped(json, false);
}

export function SubmodelElementValueToJSONTyped(value?: SubmodelElementValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (instanceOfAnnotatedRelationshipElementValue(value)) {
        return AnnotatedRelationshipElementValueToJSON(value as AnnotatedRelationshipElementValue);
    }
    if (instanceOfArray<SubmodelElementValue>(value)) {
        return Array<SubmodelElementValue>ToJSON(value as Array<SubmodelElementValue>);
    }
    if (instanceOfBasicEventElementValue(value)) {
        return BasicEventElementValueToJSON(value as BasicEventElementValue);
    }
    if (instanceOfBlobValue(value)) {
        return BlobValueToJSON(value as BlobValue);
    }
    if (instanceOfEntityValue(value)) {
        return EntityValueToJSON(value as EntityValue);
    }
    if (instanceOfFileValue(value)) {
        return FileValueToJSON(value as FileValue);
    }
    if (instanceOfPropertyValue(value)) {
        return PropertyValueToJSON(value as PropertyValue);
    }
    if (instanceOfRangeValue(value)) {
        return RangeValueToJSON(value as RangeValue);
    }
    if (instanceOfReferenceElementValue(value)) {
        return ReferenceElementValueToJSON(value as ReferenceElementValue);
    }
    if (instanceOfRelationshipElementValue(value)) {
        return RelationshipElementValueToJSON(value as RelationshipElementValue);
    }
    if (instanceOfobject(value)) {
        return objectToJSON(value as object);
    }

    return {};
}

