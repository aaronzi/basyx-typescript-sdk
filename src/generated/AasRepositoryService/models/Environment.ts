/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Submodel } from './Submodel';
import {
    SubmodelFromJSON,
    SubmodelFromJSONTyped,
    SubmodelToJSON,
    SubmodelToJSONTyped,
} from './Submodel';
import type { AssetAdministrationShell } from './AssetAdministrationShell';
import {
    AssetAdministrationShellFromJSON,
    AssetAdministrationShellFromJSONTyped,
    AssetAdministrationShellToJSON,
    AssetAdministrationShellToJSONTyped,
} from './AssetAdministrationShell';
import type { ConceptDescription } from './ConceptDescription';
import {
    ConceptDescriptionFromJSON,
    ConceptDescriptionFromJSONTyped,
    ConceptDescriptionToJSON,
    ConceptDescriptionToJSONTyped,
} from './ConceptDescription';

/**
 * 
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     * 
     * @type {Array<AssetAdministrationShell>}
     * @memberof Environment
     */
    assetAdministrationShells?: Array<AssetAdministrationShell>;
    /**
     * 
     * @type {Array<Submodel>}
     * @memberof Environment
     */
    submodels?: Array<Submodel>;
    /**
     * 
     * @type {Array<ConceptDescription>}
     * @memberof Environment
     */
    conceptDescriptions?: Array<ConceptDescription>;
}

/**
 * Check if a given object implements the Environment interface.
 */
export function instanceOfEnvironment(value: object): value is Environment {
    return true;
}

export function EnvironmentFromJSON(json: any): Environment {
    return EnvironmentFromJSONTyped(json, false);
}

export function EnvironmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Environment {
    if (json == null) {
        return json;
    }
    return {
        
        'assetAdministrationShells': json['assetAdministrationShells'] == null ? undefined : ((json['assetAdministrationShells'] as Array<any>).map(AssetAdministrationShellFromJSON)),
        'submodels': json['submodels'] == null ? undefined : ((json['submodels'] as Array<any>).map(SubmodelFromJSON)),
        'conceptDescriptions': json['conceptDescriptions'] == null ? undefined : ((json['conceptDescriptions'] as Array<any>).map(ConceptDescriptionFromJSON)),
    };
}

export function EnvironmentToJSON(json: any): Environment {
    return EnvironmentToJSONTyped(json, false);
}

export function EnvironmentToJSONTyped(value?: Environment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'assetAdministrationShells': value['assetAdministrationShells'] == null ? undefined : ((value['assetAdministrationShells'] as Array<any>).map(AssetAdministrationShellToJSON)),
        'submodels': value['submodels'] == null ? undefined : ((value['submodels'] as Array<any>).map(SubmodelToJSON)),
        'conceptDescriptions': value['conceptDescriptions'] == null ? undefined : ((value['conceptDescriptions'] as Array<any>).map(ConceptDescriptionToJSON)),
    };
}

