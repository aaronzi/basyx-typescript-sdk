/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Extension } from './Extension';
import {
    ExtensionFromJSON,
    ExtensionFromJSONTyped,
    ExtensionToJSON,
    ExtensionToJSONTyped,
} from './Extension';

/**
 * 
 * @export
 * @interface HasExtensions
 */
export interface HasExtensions {
    /**
     * 
     * @type {Array<Extension>}
     * @memberof HasExtensions
     */
    extensions?: Array<Extension>;
}

/**
 * Check if a given object implements the HasExtensions interface.
 */
export function instanceOfHasExtensions(value: object): value is HasExtensions {
    return true;
}

export function HasExtensionsFromJSON(json: any): HasExtensions {
    return HasExtensionsFromJSONTyped(json, false);
}

export function HasExtensionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): HasExtensions {
    if (json == null) {
        return json;
    }
    return {
        
        'extensions': json['extensions'] == null ? undefined : ((json['extensions'] as Array<any>).map(ExtensionFromJSON)),
    };
}

export function HasExtensionsToJSON(json: any): HasExtensions {
    return HasExtensionsToJSONTyped(json, false);
}

export function HasExtensionsToJSONTyped(value?: HasExtensions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'extensions': value['extensions'] == null ? undefined : ((value['extensions'] as Array<any>).map(ExtensionToJSON)),
    };
}

