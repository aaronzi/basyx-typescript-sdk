/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DataTypeDefXsd } from './DataTypeDefXsd';
import {
    DataTypeDefXsdFromJSON,
    DataTypeDefXsdFromJSONTyped,
    DataTypeDefXsdToJSON,
    DataTypeDefXsdToJSONTyped,
} from './DataTypeDefXsd';
import type { Reference } from './Reference';
import {
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
    ReferenceToJSONTyped,
} from './Reference';

/**
 * 
 * @export
 * @interface Extension
 */
export interface Extension {
    /**
     * 
     * @type {Reference}
     * @memberof Extension
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof Extension
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {string}
     * @memberof Extension
     */
    name: string;
    /**
     * 
     * @type {DataTypeDefXsd}
     * @memberof Extension
     */
    valueType?: DataTypeDefXsd;
    /**
     * 
     * @type {string}
     * @memberof Extension
     */
    value?: string;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof Extension
     */
    refersTo?: Array<Reference>;
}



/**
 * Check if a given object implements the Extension interface.
 */
export function instanceOfExtension(value: object): value is Extension {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ExtensionFromJSON(json: any): Extension {
    return ExtensionFromJSONTyped(json, false);
}

export function ExtensionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Extension {
    if (json == null) {
        return json;
    }
    return {
        
        'semanticId': json['semanticId'] == null ? undefined : ReferenceFromJSON(json['semanticId']),
        'supplementalSemanticIds': json['supplementalSemanticIds'] == null ? undefined : ((json['supplementalSemanticIds'] as Array<any>).map(ReferenceFromJSON)),
        'name': json['name'],
        'valueType': json['valueType'] == null ? undefined : DataTypeDefXsdFromJSON(json['valueType']),
        'value': json['value'] == null ? undefined : json['value'],
        'refersTo': json['refersTo'] == null ? undefined : ((json['refersTo'] as Array<any>).map(ReferenceFromJSON)),
    };
}

export function ExtensionToJSON(json: any): Extension {
    return ExtensionToJSONTyped(json, false);
}

export function ExtensionToJSONTyped(value?: Extension | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'semanticId': ReferenceToJSON(value['semanticId']),
        'supplementalSemanticIds': value['supplementalSemanticIds'] == null ? undefined : ((value['supplementalSemanticIds'] as Array<any>).map(ReferenceToJSON)),
        'name': value['name'],
        'valueType': DataTypeDefXsdToJSON(value['valueType']),
        'value': value['value'],
        'refersTo': value['refersTo'] == null ? undefined : ((value['refersTo'] as Array<any>).map(ReferenceToJSON)),
    };
}

