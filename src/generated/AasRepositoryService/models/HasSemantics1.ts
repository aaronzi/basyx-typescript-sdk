/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Reference } from './Reference';
import {
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
    ReferenceToJSONTyped,
} from './Reference';

/**
 * 
 * @export
 * @interface HasSemantics1
 */
export interface HasSemantics1 {
    /**
     * 
     * @type {Reference}
     * @memberof HasSemantics1
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof HasSemantics1
     */
    supplementalSemanticIds?: Array<Reference>;
}

/**
 * Check if a given object implements the HasSemantics1 interface.
 */
export function instanceOfHasSemantics1(value: object): value is HasSemantics1 {
    return true;
}

export function HasSemantics1FromJSON(json: any): HasSemantics1 {
    return HasSemantics1FromJSONTyped(json, false);
}

export function HasSemantics1FromJSONTyped(json: any, ignoreDiscriminator: boolean): HasSemantics1 {
    if (json == null) {
        return json;
    }
    return {
        
        'semanticId': json['semanticId'] == null ? undefined : ReferenceFromJSON(json['semanticId']),
        'supplementalSemanticIds': json['supplementalSemanticIds'] == null ? undefined : ((json['supplementalSemanticIds'] as Array<any>).map(ReferenceFromJSON)),
    };
}

export function HasSemantics1ToJSON(json: any): HasSemantics1 {
    return HasSemantics1ToJSONTyped(json, false);
}

export function HasSemantics1ToJSONTyped(value?: HasSemantics1 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'semanticId': ReferenceToJSON(value['semanticId']),
        'supplementalSemanticIds': value['supplementalSemanticIds'] == null ? undefined : ((value['supplementalSemanticIds'] as Array<any>).map(ReferenceToJSON)),
    };
}

