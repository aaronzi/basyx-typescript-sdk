/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Blob } from './Blob';
import {
    instanceOfBlob,
    BlobFromJSON,
    BlobFromJSONTyped,
    BlobToJSON,
} from './Blob';
import type { ModelFile } from './ModelFile';
import {
    instanceOfModelFile,
    ModelFileFromJSON,
    ModelFileFromJSONTyped,
    ModelFileToJSON,
} from './ModelFile';
import type { MultiLanguageProperty } from './MultiLanguageProperty';
import {
    instanceOfMultiLanguageProperty,
    MultiLanguagePropertyFromJSON,
    MultiLanguagePropertyFromJSONTyped,
    MultiLanguagePropertyToJSON,
} from './MultiLanguageProperty';
import type { Property } from './Property';
import {
    instanceOfProperty,
    PropertyFromJSON,
    PropertyFromJSONTyped,
    PropertyToJSON,
} from './Property';
import type { Range } from './Range';
import {
    instanceOfRange,
    RangeFromJSON,
    RangeFromJSONTyped,
    RangeToJSON,
} from './Range';
import type { ReferenceElement } from './ReferenceElement';
import {
    instanceOfReferenceElement,
    ReferenceElementFromJSON,
    ReferenceElementFromJSONTyped,
    ReferenceElementToJSON,
} from './ReferenceElement';

/**
 * @type DataElementChoice
 * 
 * @export
 */
export type DataElementChoice = Blob | ModelFile | MultiLanguageProperty | Property | Range | ReferenceElement;

export function DataElementChoiceFromJSON(json: any): DataElementChoice {
    return DataElementChoiceFromJSONTyped(json, false);
}

export function DataElementChoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataElementChoice {
    if (json == null) {
        return json;
    }
    if (instanceOfBlob(json)) {
        return BlobFromJSONTyped(json, true);
    }
    if (instanceOfModelFile(json)) {
        return ModelFileFromJSONTyped(json, true);
    }
    if (instanceOfMultiLanguageProperty(json)) {
        return MultiLanguagePropertyFromJSONTyped(json, true);
    }
    if (instanceOfProperty(json)) {
        return PropertyFromJSONTyped(json, true);
    }
    if (instanceOfRange(json)) {
        return RangeFromJSONTyped(json, true);
    }
    if (instanceOfReferenceElement(json)) {
        return ReferenceElementFromJSONTyped(json, true);
    }

    return {} as any;
}

export function DataElementChoiceToJSON(json: any): any {
    return DataElementChoiceToJSONTyped(json, false);
}

export function DataElementChoiceToJSONTyped(value?: DataElementChoice | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (instanceOfBlob(value)) {
        return BlobToJSON(value as Blob);
    }
    if (instanceOfModelFile(value)) {
        return ModelFileToJSON(value as ModelFile);
    }
    if (instanceOfMultiLanguageProperty(value)) {
        return MultiLanguagePropertyToJSON(value as MultiLanguageProperty);
    }
    if (instanceOfProperty(value)) {
        return PropertyToJSON(value as Property);
    }
    if (instanceOfRange(value)) {
        return RangeToJSON(value as Range);
    }
    if (instanceOfReferenceElement(value)) {
        return ReferenceElementToJSON(value as ReferenceElement);
    }

    return {};
}

