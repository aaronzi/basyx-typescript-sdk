/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceValue } from './ReferenceValue';
import {
    ReferenceValueFromJSON,
    ReferenceValueFromJSONTyped,
    ReferenceValueToJSON,
    ReferenceValueToJSONTyped,
} from './ReferenceValue';

/**
 * 
 * @export
 * @interface RelationshipElementValue
 */
export interface RelationshipElementValue {
    /**
     * 
     * @type {ReferenceValue}
     * @memberof RelationshipElementValue
     */
    first: ReferenceValue;
    /**
     * 
     * @type {ReferenceValue}
     * @memberof RelationshipElementValue
     */
    second: ReferenceValue;
}

/**
 * Check if a given object implements the RelationshipElementValue interface.
 */
export function instanceOfRelationshipElementValue(value: object): value is RelationshipElementValue {
    if (!('first' in value) || value['first'] === undefined) return false;
    if (!('second' in value) || value['second'] === undefined) return false;
    return true;
}

export function RelationshipElementValueFromJSON(json: any): RelationshipElementValue {
    return RelationshipElementValueFromJSONTyped(json, false);
}

export function RelationshipElementValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): RelationshipElementValue {
    if (json == null) {
        return json;
    }
    return {
        
        'first': ReferenceValueFromJSON(json['first']),
        'second': ReferenceValueFromJSON(json['second']),
    };
}

export function RelationshipElementValueToJSON(json: any): RelationshipElementValue {
    return RelationshipElementValueToJSONTyped(json, false);
}

export function RelationshipElementValueToJSONTyped(value?: RelationshipElementValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'first': ReferenceValueToJSON(value['first']),
        'second': ReferenceValueToJSON(value['second']),
    };
}

