/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository Service Specification
 * The Full Profile of the Asset Administration Shell Repository Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EntityType } from './EntityType';
import {
    EntityTypeFromJSON,
    EntityTypeFromJSONTyped,
    EntityTypeToJSON,
    EntityTypeToJSONTyped,
} from './EntityType';
import type { Extension } from './Extension';
import {
    ExtensionFromJSON,
    ExtensionFromJSONTyped,
    ExtensionToJSON,
    ExtensionToJSONTyped,
} from './Extension';
import type { EmbeddedDataSpecification } from './EmbeddedDataSpecification';
import {
    EmbeddedDataSpecificationFromJSON,
    EmbeddedDataSpecificationFromJSONTyped,
    EmbeddedDataSpecificationToJSON,
    EmbeddedDataSpecificationToJSONTyped,
} from './EmbeddedDataSpecification';
import type { SpecificAssetId } from './SpecificAssetId';
import {
    SpecificAssetIdFromJSON,
    SpecificAssetIdFromJSONTyped,
    SpecificAssetIdToJSON,
    SpecificAssetIdToJSONTyped,
} from './SpecificAssetId';
import type { SubmodelElementChoice } from './SubmodelElementChoice';
import {
    SubmodelElementChoiceFromJSON,
    SubmodelElementChoiceFromJSONTyped,
    SubmodelElementChoiceToJSON,
    SubmodelElementChoiceToJSONTyped,
} from './SubmodelElementChoice';
import type { Reference } from './Reference';
import {
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
    ReferenceToJSONTyped,
} from './Reference';
import type { LangStringTextType } from './LangStringTextType';
import {
    LangStringTextTypeFromJSON,
    LangStringTextTypeFromJSONTyped,
    LangStringTextTypeToJSON,
    LangStringTextTypeToJSONTyped,
} from './LangStringTextType';
import type { ReferableAllOfIdShort } from './ReferableAllOfIdShort';
import {
    ReferableAllOfIdShortFromJSON,
    ReferableAllOfIdShortFromJSONTyped,
    ReferableAllOfIdShortToJSON,
    ReferableAllOfIdShortToJSONTyped,
} from './ReferableAllOfIdShort';
import type { Qualifier } from './Qualifier';
import {
    QualifierFromJSON,
    QualifierFromJSONTyped,
    QualifierToJSON,
    QualifierToJSONTyped,
} from './Qualifier';
import type { LangStringNameType } from './LangStringNameType';
import {
    LangStringNameTypeFromJSON,
    LangStringNameTypeFromJSONTyped,
    LangStringNameTypeToJSON,
    LangStringNameTypeToJSONTyped,
} from './LangStringNameType';

/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * 
     * @type {Array<Extension>}
     * @memberof Entity
     */
    extensions?: Array<Extension>;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    category?: string;
    /**
     * 
     * @type {ReferableAllOfIdShort}
     * @memberof Entity
     */
    idShort?: ReferableAllOfIdShort;
    /**
     * 
     * @type {Array<LangStringNameType>}
     * @memberof Entity
     */
    displayName?: Array<LangStringNameType>;
    /**
     * 
     * @type {Array<LangStringTextType>}
     * @memberof Entity
     */
    description?: Array<LangStringTextType>;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    modelType: string;
    /**
     * 
     * @type {Reference}
     * @memberof Entity
     */
    semanticId?: Reference;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof Entity
     */
    supplementalSemanticIds?: Array<Reference>;
    /**
     * 
     * @type {Array<Qualifier>}
     * @memberof Entity
     */
    qualifiers?: Array<Qualifier>;
    /**
     * 
     * @type {Array<EmbeddedDataSpecification>}
     * @memberof Entity
     */
    embeddedDataSpecifications?: Array<EmbeddedDataSpecification>;
    /**
     * 
     * @type {Array<SubmodelElementChoice>}
     * @memberof Entity
     */
    statements?: Array<SubmodelElementChoice>;
    /**
     * 
     * @type {EntityType}
     * @memberof Entity
     */
    entityType: EntityType;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    globalAssetId?: string;
    /**
     * 
     * @type {Array<SpecificAssetId>}
     * @memberof Entity
     */
    specificAssetIds?: Array<SpecificAssetId>;
}



/**
 * Check if a given object implements the Entity interface.
 */
export function instanceOfEntity(value: object): value is Entity {
    if (!('modelType' in value) || value['modelType'] === undefined) return false;
    if (!('entityType' in value) || value['entityType'] === undefined) return false;
    return true;
}

export function EntityFromJSON(json: any): Entity {
    return EntityFromJSONTyped(json, false);
}

export function EntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entity {
    if (json == null) {
        return json;
    }
    return {
        
        'extensions': json['extensions'] == null ? undefined : ((json['extensions'] as Array<any>).map(ExtensionFromJSON)),
        'category': json['category'] == null ? undefined : json['category'],
        'idShort': json['idShort'] == null ? undefined : ReferableAllOfIdShortFromJSON(json['idShort']),
        'displayName': json['displayName'] == null ? undefined : ((json['displayName'] as Array<any>).map(LangStringNameTypeFromJSON)),
        'description': json['description'] == null ? undefined : ((json['description'] as Array<any>).map(LangStringTextTypeFromJSON)),
        'modelType': json['modelType'],
        'semanticId': json['semanticId'] == null ? undefined : ReferenceFromJSON(json['semanticId']),
        'supplementalSemanticIds': json['supplementalSemanticIds'] == null ? undefined : ((json['supplementalSemanticIds'] as Array<any>).map(ReferenceFromJSON)),
        'qualifiers': json['qualifiers'] == null ? undefined : ((json['qualifiers'] as Array<any>).map(QualifierFromJSON)),
        'embeddedDataSpecifications': json['embeddedDataSpecifications'] == null ? undefined : ((json['embeddedDataSpecifications'] as Array<any>).map(EmbeddedDataSpecificationFromJSON)),
        'statements': json['statements'] == null ? undefined : ((json['statements'] as Array<any>).map(SubmodelElementChoiceFromJSON)),
        'entityType': EntityTypeFromJSON(json['entityType']),
        'globalAssetId': json['globalAssetId'] == null ? undefined : json['globalAssetId'],
        'specificAssetIds': json['specificAssetIds'] == null ? undefined : ((json['specificAssetIds'] as Array<any>).map(SpecificAssetIdFromJSON)),
    };
}

export function EntityToJSON(json: any): Entity {
    return EntityToJSONTyped(json, false);
}

export function EntityToJSONTyped(value?: Entity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'extensions': value['extensions'] == null ? undefined : ((value['extensions'] as Array<any>).map(ExtensionToJSON)),
        'category': value['category'],
        'idShort': ReferableAllOfIdShortToJSON(value['idShort']),
        'displayName': value['displayName'] == null ? undefined : ((value['displayName'] as Array<any>).map(LangStringNameTypeToJSON)),
        'description': value['description'] == null ? undefined : ((value['description'] as Array<any>).map(LangStringTextTypeToJSON)),
        'modelType': value['modelType'],
        'semanticId': ReferenceToJSON(value['semanticId']),
        'supplementalSemanticIds': value['supplementalSemanticIds'] == null ? undefined : ((value['supplementalSemanticIds'] as Array<any>).map(ReferenceToJSON)),
        'qualifiers': value['qualifiers'] == null ? undefined : ((value['qualifiers'] as Array<any>).map(QualifierToJSON)),
        'embeddedDataSpecifications': value['embeddedDataSpecifications'] == null ? undefined : ((value['embeddedDataSpecifications'] as Array<any>).map(EmbeddedDataSpecificationToJSON)),
        'statements': value['statements'] == null ? undefined : ((value['statements'] as Array<any>).map(SubmodelElementChoiceToJSON)),
        'entityType': EntityTypeToJSON(value['entityType']),
        'globalAssetId': value['globalAssetId'],
        'specificAssetIds': value['specificAssetIds'] == null ? undefined : ((value['specificAssetIds'] as Array<any>).map(SpecificAssetIdToJSON)),
    };
}

